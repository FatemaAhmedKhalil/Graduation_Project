
Graduation_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf0  08003bf0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf0  08003bf0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca2c  20000008  08003c00  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca34  08003c00  0002ca34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a18  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001813  00000000  00000000  00027a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00029268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  00029a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023f6  00000000  00000000  0002a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e34  00000000  00000000  0002c556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00011fd6  00000000  00000000  0003338a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00045360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f10  00000000  00000000  000453b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b90 	.word	0x08003b90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	08003b90 	.word	0x08003b90

080001e0 <DHT11_voidInitialize>:

static u8 u8TempReading=0;
static u32 u8TimeInstance1=0, u8TimeInstance2=0, u8PulseDuration=0;

void DHT11_voidInitialize(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
    // Clear Data stack
    DHT11_DATA[0] = DHT11_DATA[1] = DHT11_DATA[2] = DHT11_DATA[3] = DHT11_DATA[4] = 0;
 80001e4:	4b16      	ldr	r3, [pc, #88]	; (8000240 <DHT11_voidInitialize+0x60>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	711a      	strb	r2, [r3, #4]
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <DHT11_voidInitialize+0x60>)
 80001ec:	791a      	ldrb	r2, [r3, #4]
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <DHT11_voidInitialize+0x60>)
 80001f0:	70da      	strb	r2, [r3, #3]
 80001f2:	4b13      	ldr	r3, [pc, #76]	; (8000240 <DHT11_voidInitialize+0x60>)
 80001f4:	78da      	ldrb	r2, [r3, #3]
 80001f6:	4b12      	ldr	r3, [pc, #72]	; (8000240 <DHT11_voidInitialize+0x60>)
 80001f8:	709a      	strb	r2, [r3, #2]
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <DHT11_voidInitialize+0x60>)
 80001fc:	789a      	ldrb	r2, [r3, #2]
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <DHT11_voidInitialize+0x60>)
 8000200:	705a      	strb	r2, [r3, #1]
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <DHT11_voidInitialize+0x60>)
 8000204:	785a      	ldrb	r2, [r3, #1]
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <DHT11_voidInitialize+0x60>)
 8000208:	701a      	strb	r2, [r3, #0]

    // Turn On the RCC for desired Timer
    RCC_u8Enable(DHT11_RCC_BUS, DHT11_RCC_PERIPHERAL);  //Enables Dedicated Timer  bus
 800020a:	2100      	movs	r1, #0
 800020c:	2003      	movs	r0, #3
 800020e:	f000 fe61 	bl	8000ed4 <RCC_u8Enable>

    // Enable GPIO
    GPIO_u8SetGPIOPinMode(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_MODER_OUTPUT);
 8000212:	2201      	movs	r2, #1
 8000214:	2103      	movs	r1, #3
 8000216:	2002      	movs	r0, #2
 8000218:	f000 f982 	bl	8000520 <GPIO_u8SetGPIOPinMode>
    GPIO_u8FastControlPinValue(DHT11_GPIO_PORT, DHT11_GPIO_PIN,GPIO_HIGH);
 800021c:	2201      	movs	r2, #1
 800021e:	2103      	movs	r1, #3
 8000220:	2002      	movs	r0, #2
 8000222:	f000 fb2f 	bl	8000884 <GPIO_u8FastControlPinValue>

    // Setting Timer Up but not start it
    MTIM_voidSetPrescaler(TIM2,DHT11_TIM_PSC_1MHz);	    //Set the pre-scaler
 8000226:	2118      	movs	r1, #24
 8000228:	2002      	movs	r0, #2
 800022a:	f000 ffc7 	bl	80011bc <MTIM_voidSetPrescaler>
	MTIM_voidUpdateGeneration(TIM2);			        //Update Counters and Shadow Registers
 800022e:	2002      	movs	r0, #2
 8000230:	f001 f858 	bl	80012e4 <MTIM_voidUpdateGeneration>
	MTIM_voidclearUpdateInterrupt(TIM2);		        //Clears Update Interrupt Flag
 8000234:	2002      	movs	r0, #2
 8000236:	f001 f86f 	bl	8001318 <MTIM_voidclearUpdateInterrupt>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000024 	.word	0x20000024

08000244 <DHT11_voidRawDataUpdate>:

void DHT11_voidRawDataUpdate()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

    // Sends 18ms 0 volt pulse.
    (void)GPIO_u8SetGPIOPinMode(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_MODER_OUTPUT);
 800024a:	2201      	movs	r2, #1
 800024c:	2103      	movs	r1, #3
 800024e:	2002      	movs	r0, #2
 8000250:	f000 f966 	bl	8000520 <GPIO_u8SetGPIOPinMode>
    (void)GPIO_u8FastControlPinValue(DHT11_GPIO_PORT, DHT11_GPIO_PIN,GPIO_LOW);
 8000254:	2200      	movs	r2, #0
 8000256:	2103      	movs	r1, #3
 8000258:	2002      	movs	r0, #2
 800025a:	f000 fb13 	bl	8000884 <GPIO_u8FastControlPinValue>

    // DHT11_delay_MilliSeconds(18);
    HTIM_voidDelayMilliseconds(DHT11_TIM_NUM,18);
 800025e:	2112      	movs	r1, #18
 8000260:	2002      	movs	r0, #2
 8000262:	f000 ff76 	bl	8001152 <HTIM_voidDelayMilliseconds>
    // Converting the GPIO Pin to Input with Pull up resistor mode
    // HTIM_voidChangeAndUpdateTiming(DHT11_TIM_NUM, 0xFFFF, DHT11_TIM_PSC_1MHz,0);
    // Set Microseconds Timer

    // DHT11_voidSetTimerMode(0xFFFF, DHT11_TIM_PSC_1MHz);
    HTIM_voidChangeAndUpdateTiming(DHT11_TIM_NUM, 0xFFFF, DHT11_TIM_PSC_1MHz,0);
 8000266:	2300      	movs	r3, #0
 8000268:	2218      	movs	r2, #24
 800026a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800026e:	2002      	movs	r0, #2
 8000270:	f000 ff39 	bl	80010e6 <HTIM_voidChangeAndUpdateTiming>
    (void)GPIO_u8SetGPIOPinMode(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_MODER_INPUT);
 8000274:	2200      	movs	r2, #0
 8000276:	2103      	movs	r1, #3
 8000278:	2002      	movs	r0, #2
 800027a:	f000 f951 	bl	8000520 <GPIO_u8SetGPIOPinMode>
    (void)GPIO_u8SetPullResMode(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PUPDR_PULLUP);
 800027e:	2201      	movs	r2, #1
 8000280:	2103      	movs	r1, #3
 8000282:	2002      	movs	r0, #2
 8000284:	f000 fbe0 	bl	8000a48 <GPIO_u8SetPullResMode>
        
        //First Reading Delay, wait until it reads HIGH and start measuring
        //while (u8TempReading==GPIO_LOW) asm("NOP");

        //*** Checking a HIGH pulse
        u8TimeInstance1 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM);
 8000288:	2002      	movs	r0, #2
 800028a:	f000 ff85 	bl	8001198 <MTIM_u32ReadCounterValue>
 800028e:	4603      	mov	r3, r0
 8000290:	4a5e      	ldr	r2, [pc, #376]	; (800040c <DHT11_voidRawDataUpdate+0x1c8>)
 8000292:	6013      	str	r3, [r2, #0]
        do
        {
            u8TempReading = DHT11_DATA_FastRead;
 8000294:	4b5e      	ldr	r3, [pc, #376]	; (8000410 <DHT11_voidRawDataUpdate+0x1cc>)
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	08db      	lsrs	r3, r3, #3
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b5c      	ldr	r3, [pc, #368]	; (8000414 <DHT11_voidRawDataUpdate+0x1d0>)
 80002a4:	701a      	strb	r2, [r3, #0]
        }
        while( u8TempReading == GPIO_HIGH && MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 0 );
 80002a6:	4b5b      	ldr	r3, [pc, #364]	; (8000414 <DHT11_voidRawDataUpdate+0x1d0>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d105      	bne.n	80002ba <DHT11_voidRawDataUpdate+0x76>
 80002ae:	2002      	movs	r0, #2
 80002b0:	f001 f84c 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0ec      	beq.n	8000294 <DHT11_voidRawDataUpdate+0x50>
        u8TimeInstance2 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM);
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 ff6c 	bl	8001198 <MTIM_u32ReadCounterValue>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4a55      	ldr	r2, [pc, #340]	; (8000418 <DHT11_voidRawDataUpdate+0x1d4>)
 80002c4:	6013      	str	r3, [r2, #0]
        
        u8PulseDuration = u8TimeInstance2-u8TimeInstance1;
 80002c6:	4b54      	ldr	r3, [pc, #336]	; (8000418 <DHT11_voidRawDataUpdate+0x1d4>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b50      	ldr	r3, [pc, #320]	; (800040c <DHT11_voidRawDataUpdate+0x1c8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	4a52      	ldr	r2, [pc, #328]	; (800041c <DHT11_voidRawDataUpdate+0x1d8>)
 80002d2:	6013      	str	r3, [r2, #0]
        if (u8PulseDuration > 42  || MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 1) // add an error range of 2usec
 80002d4:	4b51      	ldr	r3, [pc, #324]	; (800041c <DHT11_voidRawDataUpdate+0x1d8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b2a      	cmp	r3, #42	; 0x2a
 80002da:	f200 808f 	bhi.w	80003fc <DHT11_voidRawDataUpdate+0x1b8>
 80002de:	2002      	movs	r0, #2
 80002e0:	f001 f834 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	f000 8088 	beq.w	80003fc <DHT11_voidRawDataUpdate+0x1b8>
        	// Time Out, Means Not working
            return; // Exit with error
        }

        //**** Checking the LOW 80 usec pulse
        u8TimeInstance1 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM);
 80002ec:	2002      	movs	r0, #2
 80002ee:	f000 ff53 	bl	8001198 <MTIM_u32ReadCounterValue>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a45      	ldr	r2, [pc, #276]	; (800040c <DHT11_voidRawDataUpdate+0x1c8>)
 80002f6:	6013      	str	r3, [r2, #0]
        do
        {
            u8TempReading=DHT11_DATA_FastRead;
 80002f8:	4b45      	ldr	r3, [pc, #276]	; (8000410 <DHT11_voidRawDataUpdate+0x1cc>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	08db      	lsrs	r3, r3, #3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b43      	ldr	r3, [pc, #268]	; (8000414 <DHT11_voidRawDataUpdate+0x1d0>)
 8000308:	701a      	strb	r2, [r3, #0]
        }
        while (u8TempReading == GPIO_LOW && MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 0);
 800030a:	4b42      	ldr	r3, [pc, #264]	; (8000414 <DHT11_voidRawDataUpdate+0x1d0>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d105      	bne.n	800031e <DHT11_voidRawDataUpdate+0xda>
 8000312:	2002      	movs	r0, #2
 8000314:	f001 f81a 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0ec      	beq.n	80002f8 <DHT11_voidRawDataUpdate+0xb4>
        u8TimeInstance2 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM);
 800031e:	2002      	movs	r0, #2
 8000320:	f000 ff3a 	bl	8001198 <MTIM_u32ReadCounterValue>
 8000324:	4603      	mov	r3, r0
 8000326:	4a3c      	ldr	r2, [pc, #240]	; (8000418 <DHT11_voidRawDataUpdate+0x1d4>)
 8000328:	6013      	str	r3, [r2, #0]
        u8PulseDuration = u8TimeInstance2 - u8TimeInstance1;
 800032a:	4b3b      	ldr	r3, [pc, #236]	; (8000418 <DHT11_voidRawDataUpdate+0x1d4>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b37      	ldr	r3, [pc, #220]	; (800040c <DHT11_voidRawDataUpdate+0x1c8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	4a39      	ldr	r2, [pc, #228]	; (800041c <DHT11_voidRawDataUpdate+0x1d8>)
 8000336:	6013      	str	r3, [r2, #0]
        if (u8PulseDuration>82  || MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 1) // add an error range of 2usec
 8000338:	4b38      	ldr	r3, [pc, #224]	; (800041c <DHT11_voidRawDataUpdate+0x1d8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b52      	cmp	r3, #82	; 0x52
 800033e:	d85f      	bhi.n	8000400 <DHT11_voidRawDataUpdate+0x1bc>
 8000340:	2002      	movs	r0, #2
 8000342:	f001 f803 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 8000346:	4603      	mov	r3, r0
 8000348:	2b01      	cmp	r3, #1
 800034a:	d059      	beq.n	8000400 <DHT11_voidRawDataUpdate+0x1bc>
        	// Time Out, Means Not working
            return; // Exit with error
        }

        //**** Checking the HIGH 80 usec pulse
        u8TimeInstance1 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM);
 800034c:	2002      	movs	r0, #2
 800034e:	f000 ff23 	bl	8001198 <MTIM_u32ReadCounterValue>
 8000352:	4603      	mov	r3, r0
 8000354:	4a2d      	ldr	r2, [pc, #180]	; (800040c <DHT11_voidRawDataUpdate+0x1c8>)
 8000356:	6013      	str	r3, [r2, #0]
        do
        {
            GPIO_u8GetPinValue(DHT11_GPIO_PORT, DHT11_GPIO_PIN, &u8TempReading);
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <DHT11_voidRawDataUpdate+0x1d0>)
 800035a:	2103      	movs	r1, #3
 800035c:	2002      	movs	r0, #2
 800035e:	f000 fb0f 	bl	8000980 <GPIO_u8GetPinValue>
        }
        while (u8TempReading == GPIO_HIGH && MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 0);
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <DHT11_voidRawDataUpdate+0x1d0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d105      	bne.n	8000376 <DHT11_voidRawDataUpdate+0x132>
 800036a:	2002      	movs	r0, #2
 800036c:	f000 ffee 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f0      	beq.n	8000358 <DHT11_voidRawDataUpdate+0x114>
        u8TimeInstance2 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM);
 8000376:	2002      	movs	r0, #2
 8000378:	f000 ff0e 	bl	8001198 <MTIM_u32ReadCounterValue>
 800037c:	4603      	mov	r3, r0
 800037e:	4a26      	ldr	r2, [pc, #152]	; (8000418 <DHT11_voidRawDataUpdate+0x1d4>)
 8000380:	6013      	str	r3, [r2, #0]

        u8PulseDuration = u8TimeInstance2-u8TimeInstance1;
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <DHT11_voidRawDataUpdate+0x1d4>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b21      	ldr	r3, [pc, #132]	; (800040c <DHT11_voidRawDataUpdate+0x1c8>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <DHT11_voidRawDataUpdate+0x1d8>)
 800038e:	6013      	str	r3, [r2, #0]
        if (u8PulseDuration > 90 || MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 1 ) // add an error range of 2usec
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <DHT11_voidRawDataUpdate+0x1d8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b5a      	cmp	r3, #90	; 0x5a
 8000396:	d835      	bhi.n	8000404 <DHT11_voidRawDataUpdate+0x1c0>
 8000398:	2002      	movs	r0, #2
 800039a:	f000 ffd7 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d02f      	beq.n	8000404 <DHT11_voidRawDataUpdate+0x1c0>
            return; // Exit with error
        }


        // If the sensor was working, It will now start receiving data.
        for (u8 i = 0; i<40; i++)
 80003a4:	2300      	movs	r3, #0
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	e01a      	b.n	80003e0 <DHT11_voidRawDataUpdate+0x19c>
        {
            DHT11_DATA[i/8] <<= 1;
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	08db      	lsrs	r3, r3, #3
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4611      	mov	r1, r2
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <DHT11_voidRawDataUpdate+0x1dc>)
 80003b4:	5c5b      	ldrb	r3, [r3, r1]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	b2d9      	uxtb	r1, r3
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <DHT11_voidRawDataUpdate+0x1dc>)
 80003bc:	5499      	strb	r1, [r3, r2]
            DHT11_DATA[i/8] += DHT11_u8Decoder();
 80003be:	f000 f85b 	bl	8000478 <DHT11_u8Decoder>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4619      	mov	r1, r3
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	08db      	lsrs	r3, r3, #3
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4610      	mov	r0, r2
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <DHT11_voidRawDataUpdate+0x1dc>)
 80003d0:	5c1b      	ldrb	r3, [r3, r0]
 80003d2:	440b      	add	r3, r1
 80003d4:	b2d9      	uxtb	r1, r3
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <DHT11_voidRawDataUpdate+0x1dc>)
 80003d8:	5499      	strb	r1, [r3, r2]
        for (u8 i = 0; i<40; i++)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	3301      	adds	r3, #1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b27      	cmp	r3, #39	; 0x27
 80003e4:	d9e1      	bls.n	80003aa <DHT11_voidRawDataUpdate+0x166>
        }
    // End of Critical Section
    }

    // Run the timer to a WHOLE SECOND until this function is available again
    GPIO_u8SetGPIOPinMode(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_MODER_OUTPUT);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2103      	movs	r1, #3
 80003ea:	2002      	movs	r0, #2
 80003ec:	f000 f898 	bl	8000520 <GPIO_u8SetGPIOPinMode>
    GPIO_u8SetPinValue(DHT11_GPIO_PORT, DHT11_GPIO_PIN,GPIO_HIGH);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2103      	movs	r1, #3
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 f9ad 	bl	8000754 <GPIO_u8SetPinValue>
 80003fa:	e004      	b.n	8000406 <DHT11_voidRawDataUpdate+0x1c2>
            return; // Exit with error
 80003fc:	bf00      	nop
 80003fe:	e002      	b.n	8000406 <DHT11_voidRawDataUpdate+0x1c2>
            return; // Exit with error
 8000400:	bf00      	nop
 8000402:	e000      	b.n	8000406 <DHT11_voidRawDataUpdate+0x1c2>
            return; // Exit with error
 8000404:	bf00      	nop

    //return 0;
}
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000002c 	.word	0x2000002c
 8000410:	40020400 	.word	0x40020400
 8000414:	20000029 	.word	0x20000029
 8000418:	20000030 	.word	0x20000030
 800041c:	20000034 	.word	0x20000034
 8000420:	20000024 	.word	0x20000024

08000424 <DHT11_u8GetReadings>:

u8 DHT11_u8GetReadings(u8 *pu8Humidity,s8 *ps8Temperature)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
    if (DHT11_DATA[0] + DHT11_DATA[1] + DHT11_DATA[2] +DHT11_DATA[3] !=DHT11_DATA[4])
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <DHT11_u8GetReadings+0x50>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	461a      	mov	r2, r3
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <DHT11_u8GetReadings+0x50>)
 8000436:	785b      	ldrb	r3, [r3, #1]
 8000438:	4413      	add	r3, r2
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <DHT11_u8GetReadings+0x50>)
 800043c:	7892      	ldrb	r2, [r2, #2]
 800043e:	4413      	add	r3, r2
 8000440:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <DHT11_u8GetReadings+0x50>)
 8000442:	78d2      	ldrb	r2, [r2, #3]
 8000444:	4413      	add	r3, r2
 8000446:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <DHT11_u8GetReadings+0x50>)
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4293      	cmp	r3, r2
 800044c:	d001      	beq.n	8000452 <DHT11_u8GetReadings+0x2e>
	{
    	//Failed Parity Check
		return 2;
 800044e:	2302      	movs	r3, #2
 8000450:	e009      	b.n	8000466 <DHT11_u8GetReadings+0x42>
	}
	else
    {
		//Successful Parity Check
        *pu8Humidity    = DHT11_DATA[0];
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <DHT11_u8GetReadings+0x50>)
 8000454:	781a      	ldrb	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	701a      	strb	r2, [r3, #0]
        *ps8Temperature = DHT11_DATA[2];
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <DHT11_u8GetReadings+0x50>)
 800045c:	789b      	ldrb	r3, [r3, #2]
 800045e:	b25a      	sxtb	r2, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	701a      	strb	r2, [r3, #0]
    }
    return 0;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000024 	.word	0x20000024

08000478 <DHT11_u8Decoder>:

//******************************* Private Functions *******************************//
u8   DHT11_u8Decoder(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
    // but seriously, after understanding the timer, I found that it's not worth the effort
    // to implement it.

    do
    {
    	u8TempReading = DHT11_DATA_FastRead;
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <DHT11_u8Decoder+0x94>)
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	08db      	lsrs	r3, r3, #3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <DHT11_u8Decoder+0x98>)
 800048c:	701a      	strb	r2, [r3, #0]
    }
    while (u8TempReading == GPIO_LOW && MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 0);
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <DHT11_u8Decoder+0x98>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d105      	bne.n	80004a2 <DHT11_u8Decoder+0x2a>
 8000496:	2002      	movs	r0, #2
 8000498:	f000 ff58 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0ec      	beq.n	800047c <DHT11_u8Decoder+0x4>
    u8TimeInstance1 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM); //The first instance where the input was HIGH
 80004a2:	2002      	movs	r0, #2
 80004a4:	f000 fe78 	bl	8001198 <MTIM_u32ReadCounterValue>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <DHT11_u8Decoder+0x9c>)
 80004ac:	6013      	str	r3, [r2, #0]
    // Reading the Pulse Duration
    do
    {
    	u8TempReading = DHT11_DATA_FastRead;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <DHT11_u8Decoder+0x94>)
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	08db      	lsrs	r3, r3, #3
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <DHT11_u8Decoder+0x98>)
 80004be:	701a      	strb	r2, [r3, #0]
    }
    while (u8TempReading == GPIO_HIGH && MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM) == 0);
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <DHT11_u8Decoder+0x98>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d105      	bne.n	80004d4 <DHT11_u8Decoder+0x5c>
 80004c8:	2002      	movs	r0, #2
 80004ca:	f000 ff3f 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d0ec      	beq.n	80004ae <DHT11_u8Decoder+0x36>
    u8TimeInstance2 = MTIM_u32ReadCounterValue(DHT11_TIM_NUM); // The last  instance where the input was HIGH
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 fe5f 	bl	8001198 <MTIM_u32ReadCounterValue>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <DHT11_u8Decoder+0xa0>)
 80004de:	6013      	str	r3, [r2, #0]
    u8PulseDuration = u8TimeInstance2-u8TimeInstance1;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <DHT11_u8Decoder+0xa0>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <DHT11_u8Decoder+0x9c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4a0c      	ldr	r2, [pc, #48]	; (800051c <DHT11_u8Decoder+0xa4>)
 80004ec:	6013      	str	r3, [r2, #0]

    // The average between 30 and 70 is 50, So this will be the optimal value to compare at
    if (u8PulseDuration >35  || MTIM_u8ReadUpdateInterrupt(DHT11_TIM_NUM)==1)
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <DHT11_u8Decoder+0xa4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b23      	cmp	r3, #35	; 0x23
 80004f4:	d805      	bhi.n	8000502 <DHT11_u8Decoder+0x8a>
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 ff28 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d101      	bne.n	8000506 <DHT11_u8Decoder+0x8e>
        return 1;
 8000502:	2301      	movs	r3, #1
 8000504:	e000      	b.n	8000508 <DHT11_u8Decoder+0x90>
    else
        return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020400 	.word	0x40020400
 8000510:	20000029 	.word	0x20000029
 8000514:	2000002c 	.word	0x2000002c
 8000518:	20000030 	.word	0x20000030
 800051c:	20000034 	.word	0x20000034

08000520 <GPIO_u8SetGPIOPinMode>:
#include "GPIO_Private.h"
#include "GPIO_Register.h"
#include "GPIO_Interface.h"

u8 GPIO_u8SetGPIOPinMode(u8 u8Port,u8 u8Pin, u8 u8Mode)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	460b      	mov	r3, r1
 800052c:	71bb      	strb	r3, [r7, #6]
 800052e:	4613      	mov	r3, r2
 8000530:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d102      	bne.n	8000542 <GPIO_u8SetGPIOPinMode+0x22>
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d90e      	bls.n	8000560 <GPIO_u8SetGPIOPinMode+0x40>
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d102      	bne.n	800054e <GPIO_u8SetGPIOPinMode+0x2e>
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2b0f      	cmp	r3, #15
 800054c:	d908      	bls.n	8000560 <GPIO_u8SetGPIOPinMode+0x40>
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d157      	bne.n	8000604 <GPIO_u8SetGPIOPinMode+0xe4>
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	2b0c      	cmp	r3, #12
 8000558:	d802      	bhi.n	8000560 <GPIO_u8SetGPIOPinMode+0x40>
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d851      	bhi.n	8000604 <GPIO_u8SetGPIOPinMode+0xe4>
	{
		u8Pin<<=1; //Multiply by 2
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	71bb      	strb	r3, [r7, #6]
		switch (u8Port)
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d032      	beq.n	80005d2 <GPIO_u8SetGPIOPinMode+0xb2>
 800056c:	2b03      	cmp	r3, #3
 800056e:	dc45      	bgt.n	80005fc <GPIO_u8SetGPIOPinMode+0xdc>
 8000570:	2b01      	cmp	r3, #1
 8000572:	d002      	beq.n	800057a <GPIO_u8SetGPIOPinMode+0x5a>
 8000574:	2b02      	cmp	r3, #2
 8000576:	d016      	beq.n	80005a6 <GPIO_u8SetGPIOPinMode+0x86>
 8000578:	e040      	b.n	80005fc <GPIO_u8SetGPIOPinMode+0xdc>
		{
			case GPIO_PORTA:
				GPIOA->MODER &= (~(0b11<<u8Pin)); // Resets the two Values
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <GPIO_u8SetGPIOPinMode+0xf8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	79ba      	ldrb	r2, [r7, #6]
 8000580:	2103      	movs	r1, #3
 8000582:	fa01 f202 	lsl.w	r2, r1, r2
 8000586:	43d2      	mvns	r2, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a23      	ldr	r2, [pc, #140]	; (8000618 <GPIO_u8SetGPIOPinMode+0xf8>)
 800058c:	400b      	ands	r3, r1
 800058e:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= u8Mode<<u8Pin;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <GPIO_u8SetGPIOPinMode+0xf8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	7979      	ldrb	r1, [r7, #5]
 8000596:	79ba      	ldrb	r2, [r7, #6]
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <GPIO_u8SetGPIOPinMode+0xf8>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	6013      	str	r3, [r2, #0]
				break;
 80005a4:	e02d      	b.n	8000602 <GPIO_u8SetGPIOPinMode+0xe2>

			case GPIO_PORTB:
				GPIOB->MODER &= (~(0b11<<u8Pin)); // Resets the two Values
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <GPIO_u8SetGPIOPinMode+0xfc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	79ba      	ldrb	r2, [r7, #6]
 80005ac:	2103      	movs	r1, #3
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	43d2      	mvns	r2, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a19      	ldr	r2, [pc, #100]	; (800061c <GPIO_u8SetGPIOPinMode+0xfc>)
 80005b8:	400b      	ands	r3, r1
 80005ba:	6013      	str	r3, [r2, #0]
				GPIOB->MODER |= u8Mode<<u8Pin;
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <GPIO_u8SetGPIOPinMode+0xfc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	7979      	ldrb	r1, [r7, #5]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <GPIO_u8SetGPIOPinMode+0xfc>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
				break;
 80005d0:	e017      	b.n	8000602 <GPIO_u8SetGPIOPinMode+0xe2>
			case GPIO_PORTC:
				GPIOC->MODER &= (~(0b11<<u8Pin)); // Resets the two Values
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <GPIO_u8SetGPIOPinMode+0x100>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	79ba      	ldrb	r2, [r7, #6]
 80005d8:	2103      	movs	r1, #3
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	43d2      	mvns	r2, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <GPIO_u8SetGPIOPinMode+0x100>)
 80005e4:	400b      	ands	r3, r1
 80005e6:	6013      	str	r3, [r2, #0]
				GPIOC->MODER |= u8Mode<<u8Pin;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <GPIO_u8SetGPIOPinMode+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7979      	ldrb	r1, [r7, #5]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	fa01 f202 	lsl.w	r2, r1, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <GPIO_u8SetGPIOPinMode+0x100>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	6013      	str	r3, [r2, #0]
			default:
				u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 80005fc:	2304      	movs	r3, #4
 80005fe:	73fb      	strb	r3, [r7, #15]
				break;
 8000600:	bf00      	nop
		switch (u8Port)
 8000602:	e001      	b.n	8000608 <GPIO_u8SetGPIOPinMode+0xe8>
		}
	}
	else
		u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000604:	2304      	movs	r3, #4
 8000606:	73fb      	strb	r3, [r7, #15]
	return u8ErrorState;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40020000 	.word	0x40020000
 800061c:	40020400 	.word	0x40020400
 8000620:	40020800 	.word	0x40020800

08000624 <GPIO_u8SetOutputPinMode>:

u8 GPIO_u8SetOutputPinMode(u8 u8Port,u8 u8Pin, u8 u8Mode)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
	
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d102      	bne.n	8000646 <GPIO_u8SetOutputPinMode+0x22>
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b0f      	cmp	r3, #15
 8000644:	d90e      	bls.n	8000664 <GPIO_u8SetOutputPinMode+0x40>
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d102      	bne.n	8000652 <GPIO_u8SetOutputPinMode+0x2e>
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b0f      	cmp	r3, #15
 8000650:	d908      	bls.n	8000664 <GPIO_u8SetOutputPinMode+0x40>
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d16e      	bne.n	8000736 <GPIO_u8SetOutputPinMode+0x112>
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2b0c      	cmp	r3, #12
 800065c:	d802      	bhi.n	8000664 <GPIO_u8SetOutputPinMode+0x40>
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d868      	bhi.n	8000736 <GPIO_u8SetOutputPinMode+0x112>
	{
		if (u8Mode == GPIO_OTYPER_PUSH_PULL) // Low Value means 0 (Clear)
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d130      	bne.n	80006cc <GPIO_u8SetOutputPinMode+0xa8>
		{
			switch (u8Port)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d01e      	beq.n	80006ae <GPIO_u8SetOutputPinMode+0x8a>
 8000670:	2b03      	cmp	r3, #3
 8000672:	dc28      	bgt.n	80006c6 <GPIO_u8SetOutputPinMode+0xa2>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d002      	beq.n	800067e <GPIO_u8SetOutputPinMode+0x5a>
 8000678:	2b02      	cmp	r3, #2
 800067a:	d00c      	beq.n	8000696 <GPIO_u8SetOutputPinMode+0x72>
 800067c:	e023      	b.n	80006c6 <GPIO_u8SetOutputPinMode+0xa2>
			{
				case GPIO_PORTA: CLR_BIT(GPIOA->OTYPER, u8Pin); break;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <GPIO_u8SetOutputPinMode+0x124>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	2101      	movs	r1, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	43d2      	mvns	r2, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <GPIO_u8SetOutputPinMode+0x124>)
 8000690:	400b      	ands	r3, r1
 8000692:	6053      	str	r3, [r2, #4]
 8000694:	e04e      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
				case GPIO_PORTB: CLR_BIT(GPIOB->OTYPER, u8Pin); break;
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <GPIO_u8SetOutputPinMode+0x128>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	43d2      	mvns	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a29      	ldr	r2, [pc, #164]	; (800074c <GPIO_u8SetOutputPinMode+0x128>)
 80006a8:	400b      	ands	r3, r1
 80006aa:	6053      	str	r3, [r2, #4]
 80006ac:	e042      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
				case GPIO_PORTC: CLR_BIT(GPIOC->OTYPER, u8Pin); break;
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <GPIO_u8SetOutputPinMode+0x12c>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	43d2      	mvns	r2, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <GPIO_u8SetOutputPinMode+0x12c>)
 80006c0:	400b      	ands	r3, r1
 80006c2:	6053      	str	r3, [r2, #4]
 80006c4:	e036      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 80006c6:	2304      	movs	r3, #4
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e033      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
			}
		}
		
		else if (u8Mode == GPIO_OTYPER_OPEN_DRAIN)	// High Value means 1 (Set)
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d12d      	bne.n	800072e <GPIO_u8SetOutputPinMode+0x10a>
		{
			switch (u8Port)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d01c      	beq.n	8000712 <GPIO_u8SetOutputPinMode+0xee>
 80006d8:	2b03      	cmp	r3, #3
 80006da:	dc25      	bgt.n	8000728 <GPIO_u8SetOutputPinMode+0x104>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d002      	beq.n	80006e6 <GPIO_u8SetOutputPinMode+0xc2>
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d00b      	beq.n	80006fc <GPIO_u8SetOutputPinMode+0xd8>
 80006e4:	e020      	b.n	8000728 <GPIO_u8SetOutputPinMode+0x104>
			{
				case GPIO_PORTA: SET_BIT(GPIOA->OTYPER, u8Pin); break;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <GPIO_u8SetOutputPinMode+0x124>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <GPIO_u8SetOutputPinMode+0x124>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6053      	str	r3, [r2, #4]
 80006fa:	e01b      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
				case GPIO_PORTB: SET_BIT(GPIOB->OTYPER, u8Pin); break;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <GPIO_u8SetOutputPinMode+0x128>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	79ba      	ldrb	r2, [r7, #6]
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <GPIO_u8SetOutputPinMode+0x128>)
 800070c:	430b      	orrs	r3, r1
 800070e:	6053      	str	r3, [r2, #4]
 8000710:	e010      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
				case GPIO_PORTC: SET_BIT(GPIOC->OTYPER, u8Pin); break;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <GPIO_u8SetOutputPinMode+0x12c>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	79ba      	ldrb	r2, [r7, #6]
 8000718:	2101      	movs	r1, #1
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <GPIO_u8SetOutputPinMode+0x12c>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6053      	str	r3, [r2, #4]
 8000726:	e005      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000728:	2304      	movs	r3, #4
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e002      	b.n	8000734 <GPIO_u8SetOutputPinMode+0x110>
			}
		}
		
		else
		u8ErrorState = GPIO_ErrorPinsOutPut;
 800072e:	2305      	movs	r3, #5
 8000730:	73fb      	strb	r3, [r7, #15]
		if (u8Mode == GPIO_OTYPER_PUSH_PULL) // Low Value means 0 (Clear)
 8000732:	e002      	b.n	800073a <GPIO_u8SetOutputPinMode+0x116>
 8000734:	e001      	b.n	800073a <GPIO_u8SetOutputPinMode+0x116>
	}
	
	else
	u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000736:	2304      	movs	r3, #4
 8000738:	73fb      	strb	r3, [r7, #15]
	
	return u8ErrorState;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40020000 	.word	0x40020000
 800074c:	40020400 	.word	0x40020400
 8000750:	40020800 	.word	0x40020800

08000754 <GPIO_u8SetPinValue>:

u8 GPIO_u8SetPinValue (u8 u8Port, u8 u8Pin, u8 u8Value)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	460b      	mov	r3, r1
 8000760:	71bb      	strb	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
	
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d102      	bne.n	8000776 <GPIO_u8SetPinValue+0x22>
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b0f      	cmp	r3, #15
 8000774:	d90e      	bls.n	8000794 <GPIO_u8SetPinValue+0x40>
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d102      	bne.n	8000782 <GPIO_u8SetPinValue+0x2e>
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d908      	bls.n	8000794 <GPIO_u8SetPinValue+0x40>
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d16e      	bne.n	8000866 <GPIO_u8SetPinValue+0x112>
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b0c      	cmp	r3, #12
 800078c:	d802      	bhi.n	8000794 <GPIO_u8SetPinValue+0x40>
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d868      	bhi.n	8000866 <GPIO_u8SetPinValue+0x112>
	{
		if (u8Value == GPIO_LOW) // Low Value means 0 (Clear)
 8000794:	797b      	ldrb	r3, [r7, #5]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d130      	bne.n	80007fc <GPIO_u8SetPinValue+0xa8>
		{
			switch (u8Port)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d01e      	beq.n	80007de <GPIO_u8SetPinValue+0x8a>
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	dc28      	bgt.n	80007f6 <GPIO_u8SetPinValue+0xa2>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d002      	beq.n	80007ae <GPIO_u8SetPinValue+0x5a>
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d00c      	beq.n	80007c6 <GPIO_u8SetPinValue+0x72>
 80007ac:	e023      	b.n	80007f6 <GPIO_u8SetPinValue+0xa2>
			{
				case GPIO_PORTA: CLR_BIT(GPIOA->ODR, u8Pin); break;
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <GPIO_u8SetPinValue+0x124>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	43d2      	mvns	r2, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <GPIO_u8SetPinValue+0x124>)
 80007c0:	400b      	ands	r3, r1
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	e04e      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
				case GPIO_PORTB: CLR_BIT(GPIOB->ODR, u8Pin); break;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <GPIO_u8SetPinValue+0x128>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	2101      	movs	r1, #1
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	43d2      	mvns	r2, r2
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a29      	ldr	r2, [pc, #164]	; (800087c <GPIO_u8SetPinValue+0x128>)
 80007d8:	400b      	ands	r3, r1
 80007da:	6153      	str	r3, [r2, #20]
 80007dc:	e042      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
				case GPIO_PORTC: CLR_BIT(GPIOC->ODR, u8Pin); break;
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <GPIO_u8SetPinValue+0x12c>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	43d2      	mvns	r2, r2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a24      	ldr	r2, [pc, #144]	; (8000880 <GPIO_u8SetPinValue+0x12c>)
 80007f0:	400b      	ands	r3, r1
 80007f2:	6153      	str	r3, [r2, #20]
 80007f4:	e036      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 80007f6:	2304      	movs	r3, #4
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e033      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
			}
		}
		
		else if (u8Value == GPIO_HIGH)	// High Value means 1 (Set)
 80007fc:	797b      	ldrb	r3, [r7, #5]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d12d      	bne.n	800085e <GPIO_u8SetPinValue+0x10a>
		{
			switch (u8Port)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d01c      	beq.n	8000842 <GPIO_u8SetPinValue+0xee>
 8000808:	2b03      	cmp	r3, #3
 800080a:	dc25      	bgt.n	8000858 <GPIO_u8SetPinValue+0x104>
 800080c:	2b01      	cmp	r3, #1
 800080e:	d002      	beq.n	8000816 <GPIO_u8SetPinValue+0xc2>
 8000810:	2b02      	cmp	r3, #2
 8000812:	d00b      	beq.n	800082c <GPIO_u8SetPinValue+0xd8>
 8000814:	e020      	b.n	8000858 <GPIO_u8SetPinValue+0x104>
			{
				case GPIO_PORTA: SET_BIT(GPIOA->ODR, u8Pin); break;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <GPIO_u8SetPinValue+0x124>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	4611      	mov	r1, r2
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <GPIO_u8SetPinValue+0x124>)
 8000826:	430b      	orrs	r3, r1
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	e01b      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
				case GPIO_PORTB: SET_BIT(GPIOB->ODR, u8Pin); break;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <GPIO_u8SetPinValue+0x128>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <GPIO_u8SetPinValue+0x128>)
 800083c:	430b      	orrs	r3, r1
 800083e:	6153      	str	r3, [r2, #20]
 8000840:	e010      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
				case GPIO_PORTC: SET_BIT(GPIOC->ODR, u8Pin); break;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <GPIO_u8SetPinValue+0x12c>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	2101      	movs	r1, #1
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	4611      	mov	r1, r2
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <GPIO_u8SetPinValue+0x12c>)
 8000852:	430b      	orrs	r3, r1
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	e005      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000858:	2304      	movs	r3, #4
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e002      	b.n	8000864 <GPIO_u8SetPinValue+0x110>
			}
		}
		
		else
		u8ErrorState = GPIO_ErrorPinsOutPut;
 800085e:	2305      	movs	r3, #5
 8000860:	73fb      	strb	r3, [r7, #15]
		if (u8Value == GPIO_LOW) // Low Value means 0 (Clear)
 8000862:	e002      	b.n	800086a <GPIO_u8SetPinValue+0x116>
 8000864:	e001      	b.n	800086a <GPIO_u8SetPinValue+0x116>
	}
	
	else
	u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000866:	2304      	movs	r3, #4
 8000868:	73fb      	strb	r3, [r7, #15]
	
	return u8ErrorState;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	40020800 	.word	0x40020800

08000884 <GPIO_u8FastControlPinValue>:

u8 GPIO_u8FastControlPinValue (u8 u8Port, u8 u8Pin, u8 u8Status)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	460b      	mov	r3, r1
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	4613      	mov	r3, r2
 8000894:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
	
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d102      	bne.n	80008a6 <GPIO_u8FastControlPinValue+0x22>
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	2b0f      	cmp	r3, #15
 80008a4:	d90e      	bls.n	80008c4 <GPIO_u8FastControlPinValue+0x40>
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d102      	bne.n	80008b2 <GPIO_u8FastControlPinValue+0x2e>
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d908      	bls.n	80008c4 <GPIO_u8FastControlPinValue+0x40>
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d153      	bne.n	8000960 <GPIO_u8FastControlPinValue+0xdc>
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b0c      	cmp	r3, #12
 80008bc:	d802      	bhi.n	80008c4 <GPIO_u8FastControlPinValue+0x40>
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d84d      	bhi.n	8000960 <GPIO_u8FastControlPinValue+0xdc>
	{
		if (u8Status == GPIO_LOW)
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d121      	bne.n	800090e <GPIO_u8FastControlPinValue+0x8a>
		{
			switch (u8Port)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d014      	beq.n	80008fa <GPIO_u8FastControlPinValue+0x76>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	dc19      	bgt.n	8000908 <GPIO_u8FastControlPinValue+0x84>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d002      	beq.n	80008de <GPIO_u8FastControlPinValue+0x5a>
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d007      	beq.n	80008ec <GPIO_u8FastControlPinValue+0x68>
 80008dc:	e014      	b.n	8000908 <GPIO_u8FastControlPinValue+0x84>
			{
				case GPIO_PORTA: GPIOA->BRR = 1 << u8Pin; break;
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	2201      	movs	r2, #1
 80008e2:	409a      	lsls	r2, r3
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <GPIO_u8FastControlPinValue+0xf0>)
 80008e6:	b292      	uxth	r2, r2
 80008e8:	835a      	strh	r2, [r3, #26]
 80008ea:	e038      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
				case GPIO_PORTB: GPIOB->BRR = 1 << u8Pin; break;
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	2201      	movs	r2, #1
 80008f0:	409a      	lsls	r2, r3
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <GPIO_u8FastControlPinValue+0xf4>)
 80008f4:	b292      	uxth	r2, r2
 80008f6:	835a      	strh	r2, [r3, #26]
 80008f8:	e031      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
				case GPIO_PORTC: GPIOC->BRR = 1 << u8Pin; break;
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	2201      	movs	r2, #1
 80008fe:	409a      	lsls	r2, r3
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <GPIO_u8FastControlPinValue+0xf8>)
 8000902:	b292      	uxth	r2, r2
 8000904:	835a      	strh	r2, [r3, #26]
 8000906:	e02a      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000908:	2304      	movs	r3, #4
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e027      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
			}
		}
		
		else if (u8Status == GPIO_HIGH)
 800090e:	797b      	ldrb	r3, [r7, #5]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d121      	bne.n	8000958 <GPIO_u8FastControlPinValue+0xd4>
		{
			switch (u8Port)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d014      	beq.n	8000944 <GPIO_u8FastControlPinValue+0xc0>
 800091a:	2b03      	cmp	r3, #3
 800091c:	dc19      	bgt.n	8000952 <GPIO_u8FastControlPinValue+0xce>
 800091e:	2b01      	cmp	r3, #1
 8000920:	d002      	beq.n	8000928 <GPIO_u8FastControlPinValue+0xa4>
 8000922:	2b02      	cmp	r3, #2
 8000924:	d007      	beq.n	8000936 <GPIO_u8FastControlPinValue+0xb2>
 8000926:	e014      	b.n	8000952 <GPIO_u8FastControlPinValue+0xce>
			{
				case GPIO_PORTA: GPIOA->BSR = 1 << u8Pin; break;
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2201      	movs	r2, #1
 800092c:	409a      	lsls	r2, r3
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <GPIO_u8FastControlPinValue+0xf0>)
 8000930:	b292      	uxth	r2, r2
 8000932:	831a      	strh	r2, [r3, #24]
 8000934:	e013      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
				case GPIO_PORTB: GPIOB->BSR = 1 << u8Pin; break;
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	2201      	movs	r2, #1
 800093a:	409a      	lsls	r2, r3
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <GPIO_u8FastControlPinValue+0xf4>)
 800093e:	b292      	uxth	r2, r2
 8000940:	831a      	strh	r2, [r3, #24]
 8000942:	e00c      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
				case GPIO_PORTC: GPIOC->BSR = 1 << u8Pin; break;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2201      	movs	r2, #1
 8000948:	409a      	lsls	r2, r3
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <GPIO_u8FastControlPinValue+0xf8>)
 800094c:	b292      	uxth	r2, r2
 800094e:	831a      	strh	r2, [r3, #24]
 8000950:	e005      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000952:	2304      	movs	r3, #4
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e002      	b.n	800095e <GPIO_u8FastControlPinValue+0xda>
			}
		}
		
		else
		u8ErrorState = GPIO_ErrorPinsOutPut;
 8000958:	2305      	movs	r3, #5
 800095a:	73fb      	strb	r3, [r7, #15]
		if (u8Status == GPIO_LOW)
 800095c:	e002      	b.n	8000964 <GPIO_u8FastControlPinValue+0xe0>
 800095e:	e001      	b.n	8000964 <GPIO_u8FastControlPinValue+0xe0>
	}
	
	else
	u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000960:	2304      	movs	r3, #4
 8000962:	73fb      	strb	r3, [r7, #15]
	
	return u8ErrorState;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40020000 	.word	0x40020000
 8000978:	40020400 	.word	0x40020400
 800097c:	40020800 	.word	0x40020800

08000980 <GPIO_u8GetPinValue>:
	
	return u8ErrorState;
}

u8 GPIO_u8GetPinValue (u8 u8Port, u8 u8Pin, u8* pu8Value)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	603a      	str	r2, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	460b      	mov	r3, r1
 800098e:	71bb      	strb	r3, [r7, #6]
	u8 u8ErrorState = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
	if ( ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) && pu8Value != 0 ) // Check Ranges
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d102      	bne.n	80009a0 <GPIO_u8GetPinValue+0x20>
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d90e      	bls.n	80009be <GPIO_u8GetPinValue+0x3e>
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d102      	bne.n	80009ac <GPIO_u8GetPinValue+0x2c>
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d908      	bls.n	80009be <GPIO_u8GetPinValue+0x3e>
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d13a      	bne.n	8000a28 <GPIO_u8GetPinValue+0xa8>
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	2b0c      	cmp	r3, #12
 80009b6:	d802      	bhi.n	80009be <GPIO_u8GetPinValue+0x3e>
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d834      	bhi.n	8000a28 <GPIO_u8GetPinValue+0xa8>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d031      	beq.n	8000a28 <GPIO_u8GetPinValue+0xa8>
	{
		switch (u8Port)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d01e      	beq.n	8000a08 <GPIO_u8GetPinValue+0x88>
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dc28      	bgt.n	8000a20 <GPIO_u8GetPinValue+0xa0>
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d002      	beq.n	80009d8 <GPIO_u8GetPinValue+0x58>
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d00c      	beq.n	80009f0 <GPIO_u8GetPinValue+0x70>
 80009d6:	e023      	b.n	8000a20 <GPIO_u8GetPinValue+0xa0>
		{
			case GPIO_PORTA: *pu8Value = GET_BIT(GPIOA->IDR, u8Pin); break;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <GPIO_u8GetPinValue+0xbc>)
 80009da:	691a      	ldr	r2, [r3, #16]
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	fa22 f303 	lsr.w	r3, r2, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e01a      	b.n	8000a26 <GPIO_u8GetPinValue+0xa6>
			case GPIO_PORTB: *pu8Value = GET_BIT(GPIOB->IDR, u8Pin); break;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <GPIO_u8GetPinValue+0xc0>)
 80009f2:	691a      	ldr	r2, [r3, #16]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	fa22 f303 	lsr.w	r3, r2, r3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e00e      	b.n	8000a26 <GPIO_u8GetPinValue+0xa6>
			case GPIO_PORTC: *pu8Value = GET_BIT(GPIOC->IDR, u8Pin); break;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <GPIO_u8GetPinValue+0xc4>)
 8000a0a:	691a      	ldr	r2, [r3, #16]
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e002      	b.n	8000a26 <GPIO_u8GetPinValue+0xa6>
			default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000a20:	2304      	movs	r3, #4
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	bf00      	nop
		switch (u8Port)
 8000a26:	e001      	b.n	8000a2c <GPIO_u8GetPinValue+0xac>
		}
	}
	else
	u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	73fb      	strb	r3, [r7, #15]
	
	return u8ErrorState;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020800 	.word	0x40020800

08000a48 <GPIO_u8SetPullResMode>:

	return u8ErrorState;
}

u8 GPIO_u8SetPullResMode(u8 u8Port,u8 u8Pin, u8 u8Mode)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	460b      	mov	r3, r1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	4613      	mov	r3, r2
 8000a58:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	73fb      	strb	r3, [r7, #15]
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d102      	bne.n	8000a6a <GPIO_u8SetPullResMode+0x22>
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	d90e      	bls.n	8000a88 <GPIO_u8SetPullResMode+0x40>
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d102      	bne.n	8000a76 <GPIO_u8SetPullResMode+0x2e>
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b0f      	cmp	r3, #15
 8000a74:	d908      	bls.n	8000a88 <GPIO_u8SetPullResMode+0x40>
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d157      	bne.n	8000b2c <GPIO_u8SetPullResMode+0xe4>
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b0c      	cmp	r3, #12
 8000a80:	d802      	bhi.n	8000a88 <GPIO_u8SetPullResMode+0x40>
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d851      	bhi.n	8000b2c <GPIO_u8SetPullResMode+0xe4>
	{
		u8Pin<<=1; //Fast Multiply by 2
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	71bb      	strb	r3, [r7, #6]
		switch (u8Port)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d032      	beq.n	8000afa <GPIO_u8SetPullResMode+0xb2>
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	dc45      	bgt.n	8000b24 <GPIO_u8SetPullResMode+0xdc>
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d002      	beq.n	8000aa2 <GPIO_u8SetPullResMode+0x5a>
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d016      	beq.n	8000ace <GPIO_u8SetPullResMode+0x86>
 8000aa0:	e040      	b.n	8000b24 <GPIO_u8SetPullResMode+0xdc>
		{
			case GPIO_PORTA:
				GPIOA->PUPDR &= (~(0b11<<u8Pin)); // Resets the two Values
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <GPIO_u8SetPullResMode+0xf8>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000aae:	43d2      	mvns	r2, r2
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <GPIO_u8SetPullResMode+0xf8>)
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	60d3      	str	r3, [r2, #12]
				GPIOA->PUPDR |= u8Mode<<u8Pin;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <GPIO_u8SetPullResMode+0xf8>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	7979      	ldrb	r1, [r7, #5]
 8000abe:	79ba      	ldrb	r2, [r7, #6]
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <GPIO_u8SetPullResMode+0xf8>)
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	60d3      	str	r3, [r2, #12]
				break;
 8000acc:	e02d      	b.n	8000b2a <GPIO_u8SetPullResMode+0xe2>

			case GPIO_PORTB:
				GPIOB->PUPDR &= (~(0b11<<u8Pin)); // Resets the two Values
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <GPIO_u8SetPullResMode+0xfc>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	43d2      	mvns	r2, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <GPIO_u8SetPullResMode+0xfc>)
 8000ae0:	400b      	ands	r3, r1
 8000ae2:	60d3      	str	r3, [r2, #12]
				GPIOB->PUPDR |= u8Mode<<u8Pin;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <GPIO_u8SetPullResMode+0xfc>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	7979      	ldrb	r1, [r7, #5]
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	fa01 f202 	lsl.w	r2, r1, r2
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <GPIO_u8SetPullResMode+0xfc>)
 8000af4:	430b      	orrs	r3, r1
 8000af6:	60d3      	str	r3, [r2, #12]
				break;
 8000af8:	e017      	b.n	8000b2a <GPIO_u8SetPullResMode+0xe2>
			case GPIO_PORTC:
				GPIOC->PUPDR &= (~(0b11<<u8Pin)); // Resets the two Values
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <GPIO_u8SetPullResMode+0x100>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	2103      	movs	r1, #3
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	43d2      	mvns	r2, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <GPIO_u8SetPullResMode+0x100>)
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	60d3      	str	r3, [r2, #12]
				GPIOC->PUPDR |= u8Mode<<u8Pin;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <GPIO_u8SetPullResMode+0x100>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	7979      	ldrb	r1, [r7, #5]
 8000b16:	79ba      	ldrb	r2, [r7, #6]
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <GPIO_u8SetPullResMode+0x100>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
			default:
				u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000b24:	2304      	movs	r3, #4
 8000b26:	73fb      	strb	r3, [r7, #15]
				break;
 8000b28:	bf00      	nop
		switch (u8Port)
 8000b2a:	e001      	b.n	8000b30 <GPIO_u8SetPullResMode+0xe8>
		}
	}
	else
		u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	73fb      	strb	r3, [r7, #15]
	return u8ErrorState;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800

08000b4c <GPIO_voidSetAlternativeFunction>:

u8 GPIO_voidSetAlternativeFunction(u8 u8Port, u8 u8Pin, u8 u8AlternateFunction)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d102      	bne.n	8000b6e <GPIO_voidSetAlternativeFunction+0x22>
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d910      	bls.n	8000b90 <GPIO_voidSetAlternativeFunction+0x44>
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d102      	bne.n	8000b7a <GPIO_voidSetAlternativeFunction+0x2e>
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b0f      	cmp	r3, #15
 8000b78:	d90a      	bls.n	8000b90 <GPIO_voidSetAlternativeFunction+0x44>
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	f040 80bf 	bne.w	8000d00 <GPIO_voidSetAlternativeFunction+0x1b4>
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	2b0c      	cmp	r3, #12
 8000b86:	d803      	bhi.n	8000b90 <GPIO_voidSetAlternativeFunction+0x44>
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	f200 80b8 	bhi.w	8000d00 <GPIO_voidSetAlternativeFunction+0x1b4>
	{
		if (u8Pin < 8)
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d854      	bhi.n	8000c40 <GPIO_voidSetAlternativeFunction+0xf4>
		{
			switch (u8Port)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d036      	beq.n	8000c0a <GPIO_voidSetAlternativeFunction+0xbe>
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	dc4c      	bgt.n	8000c3a <GPIO_voidSetAlternativeFunction+0xee>
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d002      	beq.n	8000baa <GPIO_voidSetAlternativeFunction+0x5e>
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d018      	beq.n	8000bda <GPIO_voidSetAlternativeFunction+0x8e>
 8000ba8:	e047      	b.n	8000c3a <GPIO_voidSetAlternativeFunction+0xee>
			{
				case GPIO_PORTA:
					GPIOA->AFRL &= ~(0b1111<<(u8Pin*4));
 8000baa:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	79ba      	ldrb	r2, [r7, #6]
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a55      	ldr	r2, [pc, #340]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	6213      	str	r3, [r2, #32]
					GPIOA->AFRL |= (u8AlternateFunction<<(u8Pin*4));
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000bc4:	6a1b      	ldr	r3, [r3, #32]
 8000bc6:	7979      	ldrb	r1, [r7, #5]
 8000bc8:	79ba      	ldrb	r2, [r7, #6]
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4a50      	ldr	r2, [pc, #320]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6213      	str	r3, [r2, #32]
					break;
 8000bd8:	e091      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTB:
					GPIOB->AFRL &= ~(0b1111<<(u8Pin*4));
 8000bda:	4b4f      	ldr	r3, [pc, #316]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	79ba      	ldrb	r2, [r7, #6]
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	210f      	movs	r1, #15
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a4a      	ldr	r2, [pc, #296]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000bee:	400b      	ands	r3, r1
 8000bf0:	6213      	str	r3, [r2, #32]
					GPIOB->AFRL |= (u8AlternateFunction<<(u8Pin*4));
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	7979      	ldrb	r1, [r7, #5]
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	4611      	mov	r1, r2
 8000c02:	4a45      	ldr	r2, [pc, #276]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000c04:	430b      	orrs	r3, r1
 8000c06:	6213      	str	r3, [r2, #32]
					break;
 8000c08:	e079      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTC:
					GPIOC->AFRL &= ~(0b1111<<(u8Pin*4));
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000c0c:	6a1b      	ldr	r3, [r3, #32]
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	210f      	movs	r1, #15
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a3f      	ldr	r2, [pc, #252]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000c1e:	400b      	ands	r3, r1
 8000c20:	6213      	str	r3, [r2, #32]
					GPIOC->AFRL |= (u8AlternateFunction<<(u8Pin*4));
 8000c22:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	7979      	ldrb	r1, [r7, #5]
 8000c28:	79ba      	ldrb	r2, [r7, #6]
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6213      	str	r3, [r2, #32]
					break;
 8000c38:	e061      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e05e      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>
			}
		}

		else if (u8Pin >= 8)
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d95a      	bls.n	8000cfc <GPIO_voidSetAlternativeFunction+0x1b0>
		{
			switch (u8Port)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d03a      	beq.n	8000cc2 <GPIO_voidSetAlternativeFunction+0x176>
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	dc52      	bgt.n	8000cf6 <GPIO_voidSetAlternativeFunction+0x1aa>
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d002      	beq.n	8000c5a <GPIO_voidSetAlternativeFunction+0x10e>
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d01a      	beq.n	8000c8e <GPIO_voidSetAlternativeFunction+0x142>
 8000c58:	e04d      	b.n	8000cf6 <GPIO_voidSetAlternativeFunction+0x1aa>
			{
				case GPIO_PORTA:
					GPIOA->AFRH &= ~(0b1111<<((u8Pin-8)*4));
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	79ba      	ldrb	r2, [r7, #6]
 8000c60:	3a08      	subs	r2, #8
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	210f      	movs	r1, #15
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	43d2      	mvns	r2, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000c70:	400b      	ands	r3, r1
 8000c72:	6253      	str	r3, [r2, #36]	; 0x24
					GPIOA->AFRH |= (u8AlternateFunction<<(u8Pin-8)*4);
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	7979      	ldrb	r1, [r7, #5]
 8000c7a:	79ba      	ldrb	r2, [r7, #6]
 8000c7c:	3a08      	subs	r2, #8
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8000c8c:	e037      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTB:
					GPIOB->AFRH &= ~(0b1111<<(u8Pin-8)*4);
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	79ba      	ldrb	r2, [r7, #6]
 8000c94:	3a08      	subs	r2, #8
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	210f      	movs	r1, #15
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	43d2      	mvns	r2, r2
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	6253      	str	r3, [r2, #36]	; 0x24
					GPIOB->AFRH |= (u8AlternateFunction<<(u8Pin-8)*4);
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	7979      	ldrb	r1, [r7, #5]
 8000cae:	79ba      	ldrb	r2, [r7, #6]
 8000cb0:	3a08      	subs	r2, #8
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8000cc0:	e01d      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTC:
					GPIOC->AFRH &= ~(0b1111<<(u8Pin-8)*4);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	3a08      	subs	r2, #8
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	210f      	movs	r1, #15
 8000cce:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd2:	43d2      	mvns	r2, r2
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000cd8:	400b      	ands	r3, r1
 8000cda:	6253      	str	r3, [r2, #36]	; 0x24
					GPIOC->AFRH |= (u8AlternateFunction<<(u8Pin-8)*4);
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	7979      	ldrb	r1, [r7, #5]
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	3a08      	subs	r2, #8
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8000cf4:	e003      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e000      	b.n	8000cfe <GPIO_voidSetAlternativeFunction+0x1b2>
			}
		}
 8000cfc:	bf00      	nop
		if (u8Pin < 8)
 8000cfe:	e001      	b.n	8000d04 <GPIO_voidSetAlternativeFunction+0x1b8>
	}

	else
		u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000d00:	2304      	movs	r3, #4
 8000d02:	73fb      	strb	r3, [r7, #15]

	return u8ErrorState;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020800 	.word	0x40020800

08000d20 <HLink_voidSendMessageDirectly>:
    else
        return 1;
}

void HLink_voidSendMessageDirectly(LinkMessage_t Copy_LinkMessage)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    while (GET_BIT(LINK_RASPBERRY_PI->SR,TXE) == 0 && GET_BIT(LINK_RASPBERRY_PI->SR,BSY) == 1);
 8000d28:	bf00      	nop
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HLink_voidSendMessageDirectly+0x48>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	085b      	lsrs	r3, r3, #1
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <HLink_voidSendMessageDirectly+0x26>
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HLink_voidSendMessageDirectly+0x48>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	09db      	lsrs	r3, r3, #7
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d0f1      	beq.n	8000d2a <HLink_voidSendMessageDirectly+0xa>

	LINK_RASPBERRY_PI->DR = ((u16)Copy_LinkMessage.data) | ((((u16)Copy_LinkMessage.type) | (((u16)Copy_LinkMessage.source)<<4))<<8);
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	793b      	ldrb	r3, [r7, #4]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	430b      	orrs	r3, r1
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	431a      	orrs	r2, r3
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HLink_voidSendMessageDirectly+0x48>)
 8000d5a:	60da      	str	r2, [r3, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40003800 	.word	0x40003800

08000d6c <RCC_u8SystemClkInitialization>:
#include "RCC_Register.h"
#include "RCC_Interface.h"


u8 RCC_u8SystemClkInitialization (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
	u8 u8ErrorState = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
	/** Initialize CSS **/
	#if CSSBit == 1
	SET_BIT(RCC->CR, CSSON);
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d80:	6013      	str	r3, [r2, #0]
	/** Initialize HSE Clock Bypass **/
	#if HSEBYPBit == 1
	SET_BIT(RCC->CR, HSEBYP);
	
	#elif HSEBYPBit == 0
	CLR_BIT(RCC->CR, HSEBYP);
 8000d82:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a50      	ldr	r2, [pc, #320]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
	// HSI
	#if HSIBit == 1
	SET_BIT(RCC->CR, HSION);
	
	#elif HSIBit == 0
	CLR_BIT(RCC->CR, HSION);
 8000d8e:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	6013      	str	r3, [r2, #0]
	#error "Wrong HSI Initialization"
	#endif
	
	// HSE
	#if HSEBit == 1
	SET_BIT(RCC->CR, HSEON);
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a4a      	ldr	r2, [pc, #296]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
	// PLL
	#if PLLBit == 1
	SET_BIT(RCC->CR, PLLON);
	
	#elif PLLBit == 0
	CLR_BIT(RCC->CR, PLLON);
 8000da6:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000db0:	6013      	str	r3, [r2, #0]
	// PLLI2S
	#if PLLI2SBit == 1
	SET_BIT(RCC->CR, PLLI2SON);
	
	#elif PLLI2SBit == 0
	CLR_BIT(RCC->CR, PLLI2SON);
 8000db2:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a44      	ldr	r2, [pc, #272]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000db8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000dbc:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CFGR, HPRE2);
	SET_BIT(RCC->CFGR, HPRE1);
	SET_BIT(RCC->CFGR, HPRE0);
	
	#elif AHBPreScaler == 1 // clock not divided
	CLR_BIT(RCC->CFGR, HPRE3);
 8000dbe:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4a41      	ldr	r2, [pc, #260]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dc8:	6093      	str	r3, [r2, #8]
	SET_BIT(RCC->CFGR, PPRE12);
	SET_BIT(RCC->CFGR, PPRE11);
	SET_BIT(RCC->CFGR, PPRE10);
	
	#elif APB1PreScaler == 1 // clock not divided
	CLR_BIT(RCC->CFGR, PPRE12);
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4a3e      	ldr	r2, [pc, #248]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dd4:	6093      	str	r3, [r2, #8]
	SET_BIT(RCC->CFGR, PPRE22);
	SET_BIT(RCC->CFGR, PPRE21);
	SET_BIT(RCC->CFGR, PPRE20);
	
	#elif APB2PreScaler == 1 // clock not divided
	CLR_BIT(RCC->CFGR, PPRE22);
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4a3b      	ldr	r2, [pc, #236]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000ddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000de0:	6093      	str	r3, [r2, #8]
	#error "Wrong PPRE2 Configuration"
	#endif
		
	/** Initialize PLL Configuration **/
	// PLLM
	RCC->PLLCFGR &= 0b11111111111111111111111111000000; // use bit masking
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4a38      	ldr	r2, [pc, #224]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dec:	6053      	str	r3, [r2, #4]
	
	#elif  DivisionPLLM > 63
	#error "Wrong PLLM Configuration"

	#else
	RCC->PLLCFGR |= DivisionPLLM;
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a35      	ldr	r2, [pc, #212]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000df4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000df8:	6053      	str	r3, [r2, #4]
	#endif
		
	// PLLN
	RCC->PLLCFGR &= 0b11111111111111111000000000111111; // use bit masking
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e00:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e08:	6053      	str	r3, [r2, #4]
	
	#elif MultiplicationPLLN > 432
	#error "Wrong PLLN Configuration"
	
	#else
	RCC->PLLCFGR |= (MultiplicationPLLN << 6); // left shifted by 6 to apply bit masking
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e10:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e14:	6053      	str	r3, [r2, #4]
	#endif
	
	// PLLP
	#if DivisionPLLP == 2
	CLR_BIT(RCC->PLLCFGR, PLLP0);
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6053      	str	r3, [r2, #4]
	CLR_BIT(RCC->PLLCFGR, PLLP1);
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e2c:	6053      	str	r3, [r2, #4]
	#error "Wrong PLLP Configuration"
	#endif
	
	/** Initialize PLL Clock Source **/
	#if PLLSource == 0
	CLR_BIT(RCC->PLLCFGR, PLLSRC);
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a25      	ldr	r2, [pc, #148]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e38:	6053      	str	r3, [r2, #4]
	
	#else
	#error "Wrong PLLSRC Configuration"
	#endif
	
	u32 Fvco = MultiplicationPLLN/DivisionPLLM;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	60bb      	str	r3, [r7, #8]
	u32 Fpll = (Finput*Fvco)/DivisionPLLP;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <RCC_u8SystemClkInitialization+0x160>)
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	607b      	str	r3, [r7, #4]

	if (Fpll > 84000000)	// Check Generated System Clock Range
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <RCC_u8SystemClkInitialization+0x164>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d903      	bls.n	8000e5a <RCC_u8SystemClkInitialization+0xee>
	{
		u8ErrorState = RCC_ErrorConfigPLLRCC;
 8000e52:	2303      	movs	r3, #3
 8000e54:	73fb      	strb	r3, [r7, #15]
		return u8ErrorState;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	e030      	b.n	8000ebc <RCC_u8SystemClkInitialization+0x150>
	}

	/** Initialize MCO1PRE **/
	#if MCO1PreScaler == 0
	CLR_BIT(RCC->CFGR, MCO1PRE2);
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e64:	6093      	str	r3, [r2, #8]
	#error "Wrong MCO1PRE Configuration"
	#endif
	
	/** Initialize MCO2PRE **/
	#if MCO2PreScaler == 0
	CLR_BIT(RCC->CFGR, MCO2PRE2);
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000e70:	6093      	str	r3, [r2, #8]
	#error "Wrong MCO2PRE Configuration"
	#endif
	
	/** Initialize MCON1 **/
	#if MCO1CLK == 0
	CLR_BIT(RCC->CFGR, MCO10);
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e7c:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, MCO11);
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e88:	6093      	str	r3, [r2, #8]
	#error "Wrong MCON1 Configuration"
	#endif
	
	/** Initialize MCON2 **/
	#if MCO2CLK == 0
	CLR_BIT(RCC->CFGR, MCO20);
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000e94:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, MCO21);
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ea0:	6093      	str	r3, [r2, #8]
	#if SysClkSw == 0
	CLR_BIT(RCC->CFGR, SW0);
	CLR_BIT(RCC->CFGR, SW1);
	
	#elif SysClkSw == 1
	SET_BIT(RCC->CFGR, SW0);
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, SW1);
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <RCC_u8SystemClkInitialization+0x15c>)
 8000eb4:	f023 0302 	bic.w	r3, r3, #2
 8000eb8:	6093      	str	r3, [r2, #8]
	
	#else
	#error "Wrong SW Configuration"
	#endif

	return u8ErrorState;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	00f42400 	.word	0x00f42400
 8000ed0:	0501bd00 	.word	0x0501bd00

08000ed4 <RCC_u8Enable>:

u8 RCC_u8Enable (u8 u8Bus, u8 u8Perphiral)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	u8 u8ErrorState = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
	
	if(u8Perphiral < 32) // Check Range
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2b1f      	cmp	r3, #31
 8000eec:	d83d      	bhi.n	8000f6a <RCC_u8Enable+0x96>
	{
		switch (u8Bus)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d836      	bhi.n	8000f64 <RCC_u8Enable+0x90>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <RCC_u8Enable+0x28>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f0d 	.word	0x08000f0d
 8000f00:	08000f23 	.word	0x08000f23
 8000f04:	08000f39 	.word	0x08000f39
 8000f08:	08000f4f 	.word	0x08000f4f
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR, u8Perphiral); break;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	e025      	b.n	8000f6e <RCC_u8Enable+0x9a>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR, u8Perphiral); break;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	79ba      	ldrb	r2, [r7, #6]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6353      	str	r3, [r2, #52]	; 0x34
 8000f36:	e01a      	b.n	8000f6e <RCC_u8Enable+0x9a>
			case RCC_APB1: SET_BIT(RCC->APB1ENR, u8Perphiral); break;
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	79ba      	ldrb	r2, [r7, #6]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4611      	mov	r1, r2
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	e00f      	b.n	8000f6e <RCC_u8Enable+0x9a>
			case RCC_APB2: SET_BIT(RCC->APB2ENR, u8Perphiral); break;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	79ba      	ldrb	r2, [r7, #6]
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <RCC_u8Enable+0xa8>)
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	e004      	b.n	8000f6e <RCC_u8Enable+0x9a>
			default: u8ErrorState = RCC_ErrorBusRangeRCC; break;
 8000f64:	2302      	movs	r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <RCC_u8Enable+0x9a>
		}
	}
	
	else
		u8ErrorState = RCC_ErrorPerphiralRangeRCC; // Out of Range
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
		
	return u8ErrorState;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800

08000f80 <SPI_u8Initialization>:
#include "SPI_Config.h"
#include "SPI_Private.h"
#include "SPI_Interface.h"

u8 SPI_u8Initialization(volatile SPI_MemoryMap *SPIx, u8 u8ClkPhase, u8 u8ClkPolarity, u8 u8BaudRate, u8 u8FrameFormat, u8 u8DataFormat , u8 u8Enable)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	70fb      	strb	r3, [r7, #3]
 8000f92:	460b      	mov	r3, r1
 8000f94:	70bb      	strb	r3, [r7, #2]
 8000f96:	4613      	mov	r3, r2
 8000f98:	707b      	strb	r3, [r7, #1]
	u8 ErrorState = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
	
	// Initialize Baud Rate PreScaler
	SPIx->CR1 |= (u8BaudRate << 3);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	787a      	ldrb	r2, [r7, #1]
 8000fa4:	00d2      	lsls	r2, r2, #3
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]

	// Initialize SPI Clock Polarity
	if (u8ClkPolarity == SPI_LowIDLE)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <SPI_u8Initialization+0x40>
	CLR_BIT(SPIx->CR1, CPOL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 0202 	bic.w	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00d      	b.n	8000fdc <SPI_u8Initialization+0x5c>
	else if (u8ClkPolarity == SPI_HighIDLE)
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d106      	bne.n	8000fd4 <SPI_u8Initialization+0x54>
	SET_BIT(SPIx->CR1, CPOL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f043 0202 	orr.w	r2, r3, #2
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e003      	b.n	8000fdc <SPI_u8Initialization+0x5c>
	else
	{
		ErrorState = SPI_ErrorClkPolarity;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	73fb      	strb	r3, [r7, #15]
		return ErrorState;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	e062      	b.n	80010a2 <SPI_u8Initialization+0x122>
	}

	// Initialize SPI Clock Phase
	if (u8ClkPhase == SPI_LeadingEdge)
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <SPI_u8Initialization+0x70>
	CLR_BIT(SPIx->CR1, CPHA);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 0201 	bic.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00d      	b.n	800100c <SPI_u8Initialization+0x8c>
	else if (u8ClkPhase == SPI_TrailingEdge)
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d106      	bne.n	8001004 <SPI_u8Initialization+0x84>
	SET_BIT(SPIx->CR1, CPHA);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e003      	b.n	800100c <SPI_u8Initialization+0x8c>
	else
	{
		ErrorState = SPI_ErrorClkPhase;
 8001004:	230d      	movs	r3, #13
 8001006:	73fb      	strb	r3, [r7, #15]
		return ErrorState;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	e04a      	b.n	80010a2 <SPI_u8Initialization+0x122>
	}
	
	// Data Format
	if (u8DataFormat == SPI_Data8Bits)
 800100c:	7f3b      	ldrb	r3, [r7, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <SPI_u8Initialization+0xa0>
	CLR_BIT(SPIx->CR1, DFF);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e00d      	b.n	800103c <SPI_u8Initialization+0xbc>
	else if (u8DataFormat == SPI_Data16Bits)
 8001020:	7f3b      	ldrb	r3, [r7, #28]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d106      	bne.n	8001034 <SPI_u8Initialization+0xb4>
	SET_BIT(SPIx->CR1, DFF);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e003      	b.n	800103c <SPI_u8Initialization+0xbc>
	else
	{
		ErrorState = SPI_ErrorDataFormat;
 8001034:	2312      	movs	r3, #18
 8001036:	73fb      	strb	r3, [r7, #15]
		return ErrorState;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	e032      	b.n	80010a2 <SPI_u8Initialization+0x122>
	}
	
	// Initialize Frame Format MSB/LSB first
	if (u8FrameFormat == SPI_MSBTrans)
 800103c:	7e3b      	ldrb	r3, [r7, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <SPI_u8Initialization+0xd0>
	CLR_BIT(SPIx->CR1, LSBFIRST);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e00d      	b.n	800106c <SPI_u8Initialization+0xec>
	else if (u8FrameFormat == SPI_LSBTrans)
 8001050:	7e3b      	ldrb	r3, [r7, #24]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d106      	bne.n	8001064 <SPI_u8Initialization+0xe4>
	SET_BIT(SPIx->CR1, LSBFIRST);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e003      	b.n	800106c <SPI_u8Initialization+0xec>
	else
	{
		ErrorState = SPI_ErrorFormatTrans;
 8001064:	2310      	movs	r3, #16
 8001066:	73fb      	strb	r3, [r7, #15]
		return ErrorState;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	e01a      	b.n	80010a2 <SPI_u8Initialization+0x122>
	}
	
	// Enable/Disable SPI Peripheral
	if (u8Enable == SPI_Disable)
 800106c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <SPI_u8Initialization+0x102>
	CLR_BIT(SPIx->CR1, SPE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e00e      	b.n	80010a0 <SPI_u8Initialization+0x120>
	else if (u8Enable == SPI_Enable)
 8001082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d106      	bne.n	8001098 <SPI_u8Initialization+0x118>
	SET_BIT(SPIx->CR1, SPE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e003      	b.n	80010a0 <SPI_u8Initialization+0x120>
	else
	{
		ErrorState = SPI_ErrorEnable;
 8001098:	2313      	movs	r3, #19
 800109a:	73fb      	strb	r3, [r7, #15]
		return ErrorState;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	e000      	b.n	80010a2 <SPI_u8Initialization+0x122>
	}

	return ErrorState;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <SPI_u8MasterMode>:

void SPI_u8MasterMode (volatile SPI_MemoryMap *SPIx)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
	SET_BIT(SPIx->CR1, MSTR);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f043 0204 	orr.w	r2, r3, #4
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
	SET_BIT(SPIx->CR1, SSM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
	SET_BIT(SPIx->CR1, SSI);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HTIM_voidChangeAndUpdateTiming>:
 * @param Copy_u16Prescaler New Prescaler Value
 * @param IsInterruptEnabled If set to 1, This will disable the timer Update Interrupt while inside
 * the function
 */
void HTIM_voidChangeAndUpdateTiming(u8 Copy_u8Timer,u32 Copy_u32AutoReloadValue, u32 Copy_u16Prescaler,u8 IsInterruptEnabled)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	4613      	mov	r3, r2
 80010f8:	73bb      	strb	r3, [r7, #14]
    // Stop the Timer
    MTIM_voidDisableTimer(Copy_u8Timer);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f8a3 	bl	8001248 <MTIM_voidDisableTimer>

    // Pre-load New Pre-scale and auto reload values
    MTIM_voidSetPrescaler(Copy_u8Timer, Copy_u16Prescaler);
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f858 	bl	80011bc <MTIM_voidSetPrescaler>
    MTIM_voidSetAutoReloadValue(Copy_u8Timer, Copy_u32AutoReloadValue);
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f869 	bl	80011e8 <MTIM_voidSetAutoReloadValue>

    // Disables the Pending flag if it's decided by the user that is on
    if (IsInterruptEnabled == 1)
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d103      	bne.n	8001124 <HTIM_voidChangeAndUpdateTiming+0x3e>
        MTIM_voidDisableUpdateInterrupt(Copy_u8Timer);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f8c6 	bl	80012b0 <MTIM_voidDisableUpdateInterrupt>
    
    // Update Shadow Registers without raising the timer's pending flag.
    MTIM_voidUpdateGeneration(Copy_u8Timer);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f8dc 	bl	80012e4 <MTIM_voidUpdateGeneration>
    MTIM_voidclearUpdateInterrupt(Copy_u8Timer);
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f8f2 	bl	8001318 <MTIM_voidclearUpdateInterrupt>

    if (IsInterruptEnabled == 1)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d103      	bne.n	8001142 <HTIM_voidChangeAndUpdateTiming+0x5c>
        MTIM_voidEnableUpdateInterrupt(Copy_u8Timer);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f89d 	bl	800127c <MTIM_voidEnableUpdateInterrupt>

    // Start the timer
    MTIM_voidEnableTimer(Copy_u8Timer);
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f865 	bl	8001214 <MTIM_voidEnableTimer>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HTIM_voidDelayMilliseconds>:
 * 
 * @param Copy_u8Timer          Timer Number
 * @param Copy_u32Milliseconds  Halt Time in Milliseconds.
 */
void HTIM_voidDelayMilliseconds(u8 Copy_u8Timer, u32 Copy_u32Milliseconds)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	6039      	str	r1, [r7, #0]
 800115c:	71fb      	strb	r3, [r7, #7]
    HTIM_voidChangeAndUpdateTiming(Copy_u8Timer, Copy_u32Milliseconds, HTIM_APB1_PSC_1KHZ, 0);
 800115e:	79f8      	ldrb	r0, [r7, #7]
 8001160:	2300      	movs	r3, #0
 8001162:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	f7ff ffbd 	bl	80010e6 <HTIM_voidChangeAndUpdateTiming>

    while(MTIM_u8ReadUpdateInterrupt(Copy_u8Timer) == 0)
 800116c:	e000      	b.n	8001170 <HTIM_voidDelayMilliseconds+0x1e>
    {
        asm("NOP");
 800116e:	bf00      	nop
    while(MTIM_u8ReadUpdateInterrupt(Copy_u8Timer) == 0)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f8ea 	bl	800134c <MTIM_u8ReadUpdateInterrupt>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f7      	beq.n	800116e <HTIM_voidDelayMilliseconds+0x1c>
    }

    MTIM_voidDisableTimer(Copy_u8Timer);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f861 	bl	8001248 <MTIM_voidDisableTimer>
    MTIM_voidclearUpdateInterrupt(Copy_u8Timer);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f8c5 	bl	8001318 <MTIM_voidclearUpdateInterrupt>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MTIM_u32ReadCounterValue>:
 * 
 * @param Copy_u8Timer Associated Timer Value
 * @return u32 value of the timer, it's 16 bit except for timer 5
 */
force_inline u32 MTIM_u32ReadCounterValue(u8 Copy_u8Timer)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	return TIM(Copy_u8Timer)->CNT;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <MTIM_u32ReadCounterValue+0x20>)
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	08003bc0 	.word	0x08003bc0

080011bc <MTIM_voidSetPrescaler>:
{
	TIM(Copy_u8Timer)->CNT = 0;
}

force_inline void MTIM_voidSetPrescaler(u8 Copy_u8Timer, u32 Copy_PrescalerValue)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
	TIM(Copy_u8Timer)->PSC = Copy_PrescalerValue;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <MTIM_voidSetPrescaler+0x28>)
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	08003bc0 	.word	0x08003bc0

080011e8 <MTIM_voidSetAutoReloadValue>:

force_inline void MTIM_voidSetAutoReloadValue(u8 Copy_u8Timer, u32 Copy_AutoReloadValue)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
	TIM(Copy_u8Timer)->ARR = Copy_AutoReloadValue;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <MTIM_voidSetAutoReloadValue+0x28>)
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	461a      	mov	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	08003bc0 	.word	0x08003bc0

08001214 <MTIM_voidEnableTimer>:
 * 
 * @param Copy_u8Timer Associated Timer
 * @return u8 Error code
 */
force_inline void MTIM_voidEnableTimer(u8 Copy_u8Timer)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(TIM(Copy_u8Timer)->CR1, 0);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <MTIM_voidEnableTimer+0x30>)
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	79fa      	ldrb	r2, [r7, #7]
 800122a:	4906      	ldr	r1, [pc, #24]	; (8001244 <MTIM_voidEnableTimer+0x30>)
 800122c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	08003bc0 	.word	0x08003bc0

08001248 <MTIM_voidDisableTimer>:

force_inline void MTIM_voidDisableTimer(u8 Copy_u8Timer)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(TIM(Copy_u8Timer)->CR1, 0);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <MTIM_voidDisableTimer+0x30>)
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	4906      	ldr	r1, [pc, #24]	; (8001278 <MTIM_voidDisableTimer+0x30>)
 8001260:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	6013      	str	r3, [r2, #0]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	08003bc0 	.word	0x08003bc0

0800127c <MTIM_voidEnableUpdateInterrupt>:
 * 
 * @param Copy_u8Timer 
 * @return u8 Error code
 */
force_inline void MTIM_voidEnableUpdateInterrupt(u8 Copy_u8Timer)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	SET_BIT(TIM(Copy_u8Timer)->DIER,0);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <MTIM_voidEnableUpdateInterrupt+0x30>)
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	4906      	ldr	r1, [pc, #24]	; (80012ac <MTIM_voidEnableUpdateInterrupt+0x30>)
 8001294:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	60d3      	str	r3, [r2, #12]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	08003bc0 	.word	0x08003bc0

080012b0 <MTIM_voidDisableUpdateInterrupt>:
 * 
 * @param Copy_u8Timer Associated Timer
 * @return u8 Error code
 */
force_inline void MTIM_voidDisableUpdateInterrupt(u8 Copy_u8Timer)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(TIM(Copy_u8Timer)->DIER,0);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <MTIM_voidDisableUpdateInterrupt+0x30>)
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	4906      	ldr	r1, [pc, #24]	; (80012e0 <MTIM_voidDisableUpdateInterrupt+0x30>)
 80012c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	60d3      	str	r3, [r2, #12]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	08003bc0 	.word	0x08003bc0

080012e4 <MTIM_voidUpdateGeneration>:
 * resetting the counter.
 * @param Copy_u8Timer Associated Timer
 * @return u8 Error code.
 */
force_inline void MTIM_voidUpdateGeneration(u8 Copy_u8Timer)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	SET_BIT(TIM(Copy_u8Timer)->EGR, 0);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a08      	ldr	r2, [pc, #32]	; (8001314 <MTIM_voidUpdateGeneration+0x30>)
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	4906      	ldr	r1, [pc, #24]	; (8001314 <MTIM_voidUpdateGeneration+0x30>)
 80012fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6153      	str	r3, [r2, #20]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	08003bc0 	.word	0x08003bc0

08001318 <MTIM_voidclearUpdateInterrupt>:

force_inline void MTIM_voidclearUpdateInterrupt(u8 Copy_u8Timer)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(TIM(Copy_u8Timer)->SR, 0);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a08      	ldr	r2, [pc, #32]	; (8001348 <MTIM_voidclearUpdateInterrupt+0x30>)
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	4906      	ldr	r1, [pc, #24]	; (8001348 <MTIM_voidclearUpdateInterrupt+0x30>)
 8001330:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6113      	str	r3, [r2, #16]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	08003bc0 	.word	0x08003bc0

0800134c <MTIM_u8ReadUpdateInterrupt>:

force_inline u8 MTIM_u8ReadUpdateInterrupt(u8 Copy_u8Timer)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(TIM(Copy_u8Timer)->SR, 0);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <MTIM_u8ReadUpdateInterrupt+0x28>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	08003bc0 	.word	0x08003bc0

08001378 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001384:	f001 fbae 	bl	8002ae4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001388:	4b65      	ldr	r3, [pc, #404]	; (8001520 <pvPortMalloc+0x1a8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001390:	f000 f934 	bl	80015fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001394:	4b63      	ldr	r3, [pc, #396]	; (8001524 <pvPortMalloc+0x1ac>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	f040 80a7 	bne.w	80014f0 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d02d      	beq.n	8001404 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80013a8:	2208      	movs	r2, #8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d227      	bcs.n	8001404 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80013b4:	2208      	movs	r2, #8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d021      	beq.n	800140a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f023 0307 	bic.w	r3, r3, #7
 80013cc:	3308      	adds	r3, #8
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d214      	bcs.n	80013fe <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f023 0307 	bic.w	r3, r3, #7
 80013da:	3308      	adds	r3, #8
 80013dc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d010      	beq.n	800140a <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80013e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80013fa:	bf00      	nop
 80013fc:	e7fe      	b.n	80013fc <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001402:	e002      	b.n	800140a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	e000      	b.n	800140c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800140a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06e      	beq.n	80014f0 <pvPortMalloc+0x178>
 8001412:	4b45      	ldr	r3, [pc, #276]	; (8001528 <pvPortMalloc+0x1b0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d869      	bhi.n	80014f0 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <pvPortMalloc+0x1b4>)
 800141e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001420:	4b42      	ldr	r3, [pc, #264]	; (800152c <pvPortMalloc+0x1b4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001426:	e004      	b.n	8001432 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	d903      	bls.n	8001444 <pvPortMalloc+0xcc>
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f1      	bne.n	8001428 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <pvPortMalloc+0x1a8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	429a      	cmp	r2, r3
 800144c:	d050      	beq.n	80014f0 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2208      	movs	r2, #8
 8001454:	4413      	add	r3, r2
 8001456:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	1ad2      	subs	r2, r2, r3
 8001468:	2308      	movs	r3, #8
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	429a      	cmp	r2, r3
 800146e:	d91f      	bls.n	80014b0 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <pvPortMalloc+0x120>
        __asm volatile
 8001482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001486:	f383 8811 	msr	BASEPRI, r3
 800148a:	f3bf 8f6f 	isb	sy
 800148e:	f3bf 8f4f 	dsb	sy
 8001492:	613b      	str	r3, [r7, #16]
    }
 8001494:	bf00      	nop
 8001496:	e7fe      	b.n	8001496 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1ad2      	subs	r2, r2, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80014aa:	69b8      	ldr	r0, [r7, #24]
 80014ac:	f000 f908 	bl	80016c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <pvPortMalloc+0x1b0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <pvPortMalloc+0x1b0>)
 80014bc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <pvPortMalloc+0x1b0>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <pvPortMalloc+0x1b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d203      	bcs.n	80014d2 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <pvPortMalloc+0x1b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <pvPortMalloc+0x1b8>)
 80014d0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <pvPortMalloc+0x1ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	431a      	orrs	r2, r3
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <pvPortMalloc+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <pvPortMalloc+0x1bc>)
 80014ee:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80014f0:	f001 fb06 	bl	8002b00 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <pvPortMalloc+0x19c>
        __asm volatile
 80014fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001502:	f383 8811 	msr	BASEPRI, r3
 8001506:	f3bf 8f6f 	isb	sy
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	60fb      	str	r3, [r7, #12]
    }
 8001510:	bf00      	nop
 8001512:	e7fe      	b.n	8001512 <pvPortMalloc+0x19a>
    return pvReturn;
 8001514:	69fb      	ldr	r3, [r7, #28]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000c840 	.word	0x2000c840
 8001524:	2000c854 	.word	0x2000c854
 8001528:	2000c844 	.word	0x2000c844
 800152c:	2000c838 	.word	0x2000c838
 8001530:	2000c848 	.word	0x2000c848
 8001534:	2000c84c 	.word	0x2000c84c

08001538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d04d      	beq.n	80015e6 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800154a:	2308      	movs	r3, #8
 800154c:	425b      	negs	r3, r3
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <vPortFree+0xb8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10a      	bne.n	800157c <vPortFree+0x44>
        __asm volatile
 8001566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156a:	f383 8811 	msr	BASEPRI, r3
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	f3bf 8f4f 	dsb	sy
 8001576:	60fb      	str	r3, [r7, #12]
    }
 8001578:	bf00      	nop
 800157a:	e7fe      	b.n	800157a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00a      	beq.n	800159a <vPortFree+0x62>
        __asm volatile
 8001584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	60bb      	str	r3, [r7, #8]
    }
 8001596:	bf00      	nop
 8001598:	e7fe      	b.n	8001598 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <vPortFree+0xb8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01e      	beq.n	80015e6 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11a      	bne.n	80015e6 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <vPortFree+0xb8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80015c0:	f001 fa90 	bl	8002ae4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <vPortFree+0xbc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <vPortFree+0xbc>)
 80015d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80015d2:	6938      	ldr	r0, [r7, #16]
 80015d4:	f000 f874 	bl	80016c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <vPortFree+0xc0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <vPortFree+0xc0>)
 80015e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80015e2:	f001 fa8d 	bl	8002b00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000c854 	.word	0x2000c854
 80015f4:	2000c844 	.word	0x2000c844
 80015f8:	2000c850 	.word	0x2000c850

080015fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001602:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001606:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <prvHeapInit+0xac>)
 800160a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3307      	adds	r3, #7
 800161a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f023 0307 	bic.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <prvHeapInit+0xac>)
 800162c:	4413      	add	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <prvHeapInit+0xb0>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <prvHeapInit+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	4413      	add	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001648:	2208      	movs	r2, #8
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 0307 	bic.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <prvHeapInit+0xb4>)
 800165c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <prvHeapInit+0xb4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <prvHeapInit+0xb4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <prvHeapInit+0xb4>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <prvHeapInit+0xb8>)
 800168a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <prvHeapInit+0xbc>)
 8001692:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <prvHeapInit+0xc0>)
 8001696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20000038 	.word	0x20000038
 80016ac:	2000c838 	.word	0x2000c838
 80016b0:	2000c840 	.word	0x2000c840
 80016b4:	2000c848 	.word	0x2000c848
 80016b8:	2000c844 	.word	0x2000c844
 80016bc:	2000c854 	.word	0x2000c854

080016c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <prvInsertBlockIntoFreeList+0xac>)
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e002      	b.n	80016d4 <prvInsertBlockIntoFreeList+0x14>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8f7      	bhi.n	80016ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d108      	bne.n	8001702 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	441a      	add	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	441a      	add	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d118      	bne.n	8001748 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <prvInsertBlockIntoFreeList+0xb0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d00d      	beq.n	800173e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	441a      	add	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e008      	b.n	8001750 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <prvInsertBlockIntoFreeList+0xb0>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e003      	b.n	8001750 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d002      	beq.n	800175e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000c838 	.word	0x2000c838
 8001770:	2000c840 	.word	0x2000c840

08001774 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0208 	add.w	r2, r3, #8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f103 0208 	add.w	r2, r3, #8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f103 0208 	add.w	r2, r3, #8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d103      	bne.n	80017ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e00c      	b.n	8001808 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3308      	adds	r3, #8
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e002      	b.n	80017fc <vListInsert+0x2e>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d2f6      	bcs.n	80017f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6892      	ldr	r2, [r2, #8]
 8001856:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6852      	ldr	r2, [r2, #4]
 8001860:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d103      	bne.n	8001874 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <FireSensing>:
u8 SwitchReading;
u8 Humidity;
s8 Temperature;

void FireSensing(void* pvParameters)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get Last Time the Task Started
 800189c:	f001 fa1e 	bl	8002cdc <xTaskGetTickCount>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		FireSensor_ReadingValue = 0;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <FireSensing+0x30>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
		GPIO_u8GetPinValue(GPIO_PORTB, GPIO_PIN0, &FireSensor_ReadingValue);
 80018aa:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <FireSensing+0x30>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	2002      	movs	r0, #2
 80018b0:	f7ff f866 	bl	8000980 <GPIO_u8GetPinValue>

		vTaskDelayUntil(&xLastWakeTime, 100); // Schedule the Task Every 0.1sec
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2164      	movs	r1, #100	; 0x64
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f842 	bl	8002944 <xTaskDelayUntil>
		FireSensor_ReadingValue = 0;
 80018c0:	e7f0      	b.n	80018a4 <FireSensing+0x10>
 80018c2:	bf00      	nop
 80018c4:	2000c859 	.word	0x2000c859

080018c8 <FireAction>:
	 }
}

void FireAction(void* pvParameters)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	LinkMessage_t Message;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get the Last Time the Task Started
 80018d0:	f001 fa04 	bl	8002cdc <xTaskGetTickCount>
 80018d4:	4603      	mov	r3, r0
 80018d6:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN0, !FireSensor_ReadingValue);
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <FireAction+0x54>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7fe ff32 	bl	8000754 <GPIO_u8SetPinValue>

		// Send the Reading to the Queue to send it to the Raspberry
		Message.source = LINK_SOURCE_FLAME;
 80018f0:	2301      	movs	r3, #1
 80018f2:	733b      	strb	r3, [r7, #12]
		Message.type = LINK_FLAME_TYPE_READING;
 80018f4:	2300      	movs	r3, #0
 80018f6:	737b      	strb	r3, [r7, #13]
		Message.data = !FireSensor_ReadingValue;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <FireAction+0x54>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	73bb      	strb	r3, [r7, #14]
		HLink_voidSendMessageDirectly(Message);
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fa09 	bl	8000d20 <HLink_voidSendMessageDirectly>

		vTaskDelayUntil(&xLastWakeTime, 100); // Schedule the Task Every 0.1sec
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	2164      	movs	r1, #100	; 0x64
 8001914:	4618      	mov	r0, r3
 8001916:	f001 f815 	bl	8002944 <xTaskDelayUntil>
		GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN0, !FireSensor_ReadingValue);
 800191a:	e7dd      	b.n	80018d8 <FireAction+0x10>
 800191c:	2000c859 	.word	0x2000c859

08001920 <PIRSensing>:
	 }
}

void PIRSensing(void* pvParameters)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get Last Time the Task Started
 8001928:	f001 f9d8 	bl	8002cdc <xTaskGetTickCount>
 800192c:	4603      	mov	r3, r0
 800192e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		PIR_ReadingValue = 0;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <PIRSensing+0x30>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
		GPIO_u8GetPinValue(GPIO_PORTB, GPIO_PIN2, &PIR_ReadingValue);
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <PIRSensing+0x30>)
 8001938:	2102      	movs	r1, #2
 800193a:	2002      	movs	r0, #2
 800193c:	f7ff f820 	bl	8000980 <GPIO_u8GetPinValue>

		vTaskDelayUntil(&xLastWakeTime, 1000); // Schedule the Task Every 1sec
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fffb 	bl	8002944 <xTaskDelayUntil>
		PIR_ReadingValue = 0;
 800194e:	e7ef      	b.n	8001930 <PIRSensing+0x10>
 8001950:	2000c858 	.word	0x2000c858

08001954 <PIRAction>:
	 }
}

void PIRAction(void* pvParameters)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	LinkMessage_t Message;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get the Last Time the Task Started
 800195c:	f001 f9be 	bl	8002cdc <xTaskGetTickCount>
 8001960:	4603      	mov	r3, r0
 8001962:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN2, PIR_ReadingValue);
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <PIRAction+0x44>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	2102      	movs	r1, #2
 800196c:	2001      	movs	r0, #1
 800196e:	f7fe fef1 	bl	8000754 <GPIO_u8SetPinValue>

		// Send the Reading to the Queue to send it to the Raspberry
		Message.source = LINK_SOURCE_PIR;
 8001972:	2302      	movs	r3, #2
 8001974:	733b      	strb	r3, [r7, #12]
		Message.type = LINK_PIR_TYPE_READING;
 8001976:	2300      	movs	r3, #0
 8001978:	737b      	strb	r3, [r7, #13]
		Message.data = PIR_ReadingValue;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <PIRAction+0x44>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	73bb      	strb	r3, [r7, #14]
		HLink_voidSendMessageDirectly(Message);
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff f9cd 	bl	8000d20 <HLink_voidSendMessageDirectly>

		vTaskDelayUntil(&xLastWakeTime, 1000); // Schedule the Task Every 1sec
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800198e:	4618      	mov	r0, r3
 8001990:	f000 ffd8 	bl	8002944 <xTaskDelayUntil>
		GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN2, PIR_ReadingValue);
 8001994:	e7e6      	b.n	8001964 <PIRAction+0x10>
 8001996:	bf00      	nop
 8001998:	2000c858 	.word	0x2000c858

0800199c <DoorSystemSensing>:
	 }
}

void DoorSystemSensing(void* pvParameters)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get the Last Time the Task Started
 80019a4:	f001 f99a 	bl	8002cdc <xTaskGetTickCount>
 80019a8:	4603      	mov	r3, r0
 80019aa:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SwitchReading = 1;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <DoorSystemSensing+0x30>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
		GPIO_u8GetPinValue (GPIO_PORTB, GPIO_PIN1, &SwitchReading);
 80019b2:	4a06      	ldr	r2, [pc, #24]	; (80019cc <DoorSystemSensing+0x30>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7fe ffe2 	bl	8000980 <GPIO_u8GetPinValue>

		vTaskDelayUntil(&xLastWakeTime, 1000); // Schedule the Task Every 1sec
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 ffbd 	bl	8002944 <xTaskDelayUntil>
		SwitchReading = 1;
 80019ca:	e7ef      	b.n	80019ac <DoorSystemSensing+0x10>
 80019cc:	2000c85a 	.word	0x2000c85a

080019d0 <DoorSystemAction>:
	}
}

void DoorSystemAction(void* pvParameters)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get the Last Time the Task Started
 80019d8:	f001 f980 	bl	8002cdc <xTaskGetTickCount>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN1, !SwitchReading);
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <DoorSystemAction+0x38>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	2101      	movs	r1, #1
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7fe feae 	bl	8000754 <GPIO_u8SetPinValue>
		vTaskDelayUntil(&xLastWakeTime, 1000); // Schedule the Task Every 1sec
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 ff9f 	bl	8002944 <xTaskDelayUntil>
		GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN1, !SwitchReading);
 8001a06:	e7eb      	b.n	80019e0 <DoorSystemAction+0x10>
 8001a08:	2000c85a 	.word	0x2000c85a

08001a0c <TempSensing>:
	}
}

void TempSensing(void* pvParameters)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get the Last Time the Task Started
 8001a14:	f001 f962 	bl	8002cdc <xTaskGetTickCount>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		DHT11_voidRawDataUpdate();
 8001a1c:	f7fe fc12 	bl	8000244 <DHT11_voidRawDataUpdate>
		DHT11_u8GetReadings(&Humidity, &Temperature);
 8001a20:	4905      	ldr	r1, [pc, #20]	; (8001a38 <TempSensing+0x2c>)
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <TempSensing+0x30>)
 8001a24:	f7fe fcfe 	bl	8000424 <DHT11_u8GetReadings>

		vTaskDelayUntil(&xLastWakeTime, 2000); // Schedule the Task Every 2sec
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 ff87 	bl	8002944 <xTaskDelayUntil>
		DHT11_voidRawDataUpdate();
 8001a36:	e7f1      	b.n	8001a1c <TempSensing+0x10>
 8001a38:	2000c85c 	.word	0x2000c85c
 8001a3c:	2000c85b 	.word	0x2000c85b

08001a40 <TempAction>:
	}
}

void TempAction(void* pvParameters)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	LinkMessage_t Message;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount (); // Get the Last Time the Task Started
 8001a48:	f001 f948 	bl	8002cdc <xTaskGetTickCount>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		if (Temperature > 25)
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <TempAction+0x9c>)
 8001a52:	f993 3000 	ldrsb.w	r3, [r3]
 8001a56:	2b19      	cmp	r3, #25
 8001a58:	dd0a      	ble.n	8001a70 <TempAction+0x30>
		{
			GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN4, GPIO_HIGH); // Blue LED to Declare that The Cool Air Condition is ON
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7fe fe78 	bl	8000754 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN5, GPIO_LOW);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7fe fe73 	bl	8000754 <GPIO_u8SetPinValue>
 8001a6e:	e019      	b.n	8001aa4 <TempAction+0x64>
		}
		else if (Temperature < 25)
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <TempAction+0x9c>)
 8001a72:	f993 3000 	ldrsb.w	r3, [r3]
 8001a76:	2b18      	cmp	r3, #24
 8001a78:	dc0a      	bgt.n	8001a90 <TempAction+0x50>
		{
			GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN5, GPIO_HIGH); // Red LED to Declare that The Heat Air Condition is ON
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7fe fe68 	bl	8000754 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN4, GPIO_LOW);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2104      	movs	r1, #4
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7fe fe63 	bl	8000754 <GPIO_u8SetPinValue>
 8001a8e:	e009      	b.n	8001aa4 <TempAction+0x64>
		}
		else
		{
			GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN4, GPIO_LOW);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2104      	movs	r1, #4
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe fe5d 	bl	8000754 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue (GPIO_PORTA, GPIO_PIN5, GPIO_LOW);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7fe fe58 	bl	8000754 <GPIO_u8SetPinValue>
		}

		// Send the Reading to the Queue to send it to the Raspberry
		Message.source = LINK_SOURCE_DHT11;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	733b      	strb	r3, [r7, #12]
		Message.type = LINK_DHT11_TYPE_TEMPERATURE;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	737b      	strb	r3, [r7, #13]
		Message.data = Temperature;
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <TempAction+0x9c>)
 8001aae:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	73bb      	strb	r3, [r7, #14]
		HLink_voidSendMessageDirectly(Message);
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff f932 	bl	8000d20 <HLink_voidSendMessageDirectly>

		Message.type = LINK_DHT11_TYPE_HUMIDITY;
 8001abc:	2300      	movs	r3, #0
 8001abe:	737b      	strb	r3, [r7, #13]
		Message.data = Humidity;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <TempAction+0xa0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	73bb      	strb	r3, [r7, #14]
		HLink_voidSendMessageDirectly(Message);
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff f92a 	bl	8000d20 <HLink_voidSendMessageDirectly>

		vTaskDelayUntil(&xLastWakeTime, 2000); // Schedule the Task Every 2sec
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 ff35 	bl	8002944 <xTaskDelayUntil>
		if (Temperature > 25)
 8001ada:	e7b9      	b.n	8001a50 <TempAction+0x10>
 8001adc:	2000c85c 	.word	0x2000c85c
 8001ae0:	2000c85b 	.word	0x2000c85b

08001ae4 <main>:
	}
}

int main()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af04      	add	r7, sp, #16
	RCC_u8SystemClkInitialization();
 8001aea:	f7ff f93f 	bl	8000d6c <RCC_u8SystemClkInitialization>
	RCC_u8Enable	(RCC_AHB1, RCC_GPIOA);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff f9ef 	bl	8000ed4 <RCC_u8Enable>
	RCC_u8Enable	(RCC_AHB1, RCC_GPIOB);
 8001af6:	2101      	movs	r1, #1
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff f9eb 	bl	8000ed4 <RCC_u8Enable>
	RCC_u8Enable	(RCC_APB1, RCC_SPI2);
 8001afe:	210e      	movs	r1, #14
 8001b00:	2003      	movs	r0, #3
 8001b02:	f7ff f9e7 	bl	8000ed4 <RCC_u8Enable>

	/** Initialize Fire System GPIO **/
	GPIO_u8SetGPIOPinMode	(GPIO_PORTB, GPIO_PIN0, GPIO_MODER_INPUT);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7fe fd08 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_u8SetGPIOPinMode	(GPIO_PORTA, GPIO_PIN0, GPIO_MODER_OUTPUT);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2100      	movs	r1, #0
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7fe fd03 	bl	8000520 <GPIO_u8SetGPIOPinMode>

	/** Initialize Door System GPIO **/
	GPIO_u8SetGPIOPinMode	(GPIO_PORTB, GPIO_PIN1, GPIO_MODER_INPUT);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7fe fcfe 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_u8SetOutputPinMode	(GPIO_PORTB, GPIO_PIN1, GPIO_OTYPER_PUSH_PULL);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2101      	movs	r1, #1
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7fe fd7b 	bl	8000624 <GPIO_u8SetOutputPinMode>
	GPIO_u8SetPullResMode	(GPIO_PORTB, GPIO_PIN1, GPIO_PUPDR_PULLUP);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2101      	movs	r1, #1
 8001b32:	2002      	movs	r0, #2
 8001b34:	f7fe ff88 	bl	8000a48 <GPIO_u8SetPullResMode>
	GPIO_u8SetPinValue 		(GPIO_PORTB, GPIO_PIN1, GPIO_HIGH);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7fe fe09 	bl	8000754 <GPIO_u8SetPinValue>
	GPIO_u8SetGPIOPinMode	(GPIO_PORTA, GPIO_PIN1, GPIO_MODER_OUTPUT);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7fe fcea 	bl	8000520 <GPIO_u8SetGPIOPinMode>

	/** Initialize PIR System GPIO **/
	GPIO_u8SetGPIOPinMode	(GPIO_PORTB, GPIO_PIN2, GPIO_MODER_INPUT);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2102      	movs	r1, #2
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7fe fce5 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_u8SetGPIOPinMode	(GPIO_PORTA, GPIO_PIN2, GPIO_MODER_OUTPUT);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2102      	movs	r1, #2
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7fe fce0 	bl	8000520 <GPIO_u8SetGPIOPinMode>

	/** Initialize Temperature System OUTPUT GPIO **/
	GPIO_u8SetGPIOPinMode	(GPIO_PORTA, GPIO_PIN4, GPIO_MODER_OUTPUT);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2104      	movs	r1, #4
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7fe fcdb 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_u8SetGPIOPinMode	(GPIO_PORTA, GPIO_PIN5, GPIO_MODER_OUTPUT);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7fe fcd6 	bl	8000520 <GPIO_u8SetGPIOPinMode>

	/** Initialize SPI2 Pins **/
	GPIO_u8SetGPIOPinMode			(GPIO_PORTB, GPIO_PIN12, GPIO_MODER_ALTERNATE);
 8001b74:	2202      	movs	r2, #2
 8001b76:	210c      	movs	r1, #12
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f7fe fcd1 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_voidSetAlternativeFunction	(GPIO_PORTB, GPIO_PIN12, AF5);
 8001b7e:	2241      	movs	r2, #65	; 0x41
 8001b80:	210c      	movs	r1, #12
 8001b82:	2002      	movs	r0, #2
 8001b84:	f7fe ffe2 	bl	8000b4c <GPIO_voidSetAlternativeFunction>

	GPIO_u8SetGPIOPinMode			(GPIO_PORTB, GPIO_PIN13, GPIO_MODER_ALTERNATE);
 8001b88:	2202      	movs	r2, #2
 8001b8a:	210d      	movs	r1, #13
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7fe fcc7 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_voidSetAlternativeFunction	(GPIO_PORTB, GPIO_PIN13, AF5);
 8001b92:	2241      	movs	r2, #65	; 0x41
 8001b94:	210d      	movs	r1, #13
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7fe ffd8 	bl	8000b4c <GPIO_voidSetAlternativeFunction>

	GPIO_u8SetGPIOPinMode			(GPIO_PORTB, GPIO_PIN14, GPIO_MODER_ALTERNATE);
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	210e      	movs	r1, #14
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7fe fcbd 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_voidSetAlternativeFunction	(GPIO_PORTB, GPIO_PIN14, AF5);
 8001ba6:	2241      	movs	r2, #65	; 0x41
 8001ba8:	210e      	movs	r1, #14
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7fe ffce 	bl	8000b4c <GPIO_voidSetAlternativeFunction>

	GPIO_u8SetGPIOPinMode			(GPIO_PORTB, GPIO_PIN15, GPIO_MODER_ALTERNATE);
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7fe fcb3 	bl	8000520 <GPIO_u8SetGPIOPinMode>
	GPIO_voidSetAlternativeFunction	(GPIO_PORTB, GPIO_PIN15, AF5);
 8001bba:	2241      	movs	r2, #65	; 0x41
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe ffc4 	bl	8000b4c <GPIO_voidSetAlternativeFunction>

	/** Initialize SPI2 **/
	SPI_u8MasterMode (SPI2);
 8001bc4:	4831      	ldr	r0, [pc, #196]	; (8001c8c <main+0x1a8>)
 8001bc6:	f7ff fa72 	bl	80010ae <SPI_u8MasterMode>
	SPI_u8Initialization(SPI2,SPI_LeadingEdge,
 8001bca:	2301      	movs	r3, #1
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	482b      	ldr	r0, [pc, #172]	; (8001c8c <main+0x1a8>)
 8001bde:	f7ff f9cf 	bl	8000f80 <SPI_u8Initialization>
							  SPI_fPCLK256,
							  SPI_MSBTrans,
							  SPI_Data16Bits,
							  SPI_Enable);

	DHT11_voidInitialize();
 8001be2:	f7fe fafd 	bl	80001e0 <DHT11_voidInitialize>

	/********** Create the Tasks **********/
	// Fire System Has The Highest Priority
	xTaskCreate	(FireSensing, NULL, 100, NULL, 7, NULL);
 8001be6:	2300      	movs	r3, #0
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	2307      	movs	r3, #7
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2264      	movs	r2, #100	; 0x64
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4826      	ldr	r0, [pc, #152]	; (8001c90 <main+0x1ac>)
 8001bf6:	f000 fd37 	bl	8002668 <xTaskCreate>
	xTaskCreate	(FireAction,  NULL, 100, NULL, 6, NULL);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	2306      	movs	r3, #6
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	2264      	movs	r2, #100	; 0x64
 8001c06:	2100      	movs	r1, #0
 8001c08:	4822      	ldr	r0, [pc, #136]	; (8001c94 <main+0x1b0>)
 8001c0a:	f000 fd2d 	bl	8002668 <xTaskCreate>

	// Then People Detection
	xTaskCreate	(DoorSystemSensing, NULL, 100, NULL, 5, NULL);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2305      	movs	r3, #5
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	2264      	movs	r2, #100	; 0x64
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	481e      	ldr	r0, [pc, #120]	; (8001c98 <main+0x1b4>)
 8001c1e:	f000 fd23 	bl	8002668 <xTaskCreate>
	xTaskCreate	(PIRSensing, 	    NULL, 100, NULL, 5, NULL);
 8001c22:	2300      	movs	r3, #0
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	2305      	movs	r3, #5
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2264      	movs	r2, #100	; 0x64
 8001c2e:	2100      	movs	r1, #0
 8001c30:	481a      	ldr	r0, [pc, #104]	; (8001c9c <main+0x1b8>)
 8001c32:	f000 fd19 	bl	8002668 <xTaskCreate>

	// Then Door will Take the Desire Action to Open or Close
	xTaskCreate	(DoorSystemAction, NULL, 100, NULL, 4, NULL);
 8001c36:	2300      	movs	r3, #0
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2264      	movs	r2, #100	; 0x64
 8001c42:	2100      	movs	r1, #0
 8001c44:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <main+0x1bc>)
 8001c46:	f000 fd0f 	bl	8002668 <xTaskCreate>

	// Then PIR will Take the Desire Action to Turn On the Light or Turn it Off
	xTaskCreate	(PIRAction, NULL, 100, NULL, 4, NULL);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2304      	movs	r3, #4
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2264      	movs	r2, #100	; 0x64
 8001c56:	2100      	movs	r1, #0
 8001c58:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <main+0x1c0>)
 8001c5a:	f000 fd05 	bl	8002668 <xTaskCreate>

	// Then Temperature Sensor will Sense the Temperature of the Train Car to Balance it with The Air Condition
	xTaskCreate	(TempSensing, NULL, 100, NULL, 3, NULL);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2303      	movs	r3, #3
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	2264      	movs	r2, #100	; 0x64
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <main+0x1c4>)
 8001c6e:	f000 fcfb 	bl	8002668 <xTaskCreate>
	xTaskCreate	(TempAction,  NULL, 100, NULL, 2, NULL);
 8001c72:	2300      	movs	r3, #0
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	2302      	movs	r3, #2
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2264      	movs	r2, #100	; 0x64
 8001c7e:	2100      	movs	r1, #0
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <main+0x1c8>)
 8001c82:	f000 fcf1 	bl	8002668 <xTaskCreate>


	/* Start Scheduler */
	vTaskStartScheduler();
 8001c86:	f000 fedb 	bl	8002a40 <vTaskStartScheduler>

	while(1)
 8001c8a:	e7fe      	b.n	8001c8a <main+0x1a6>
 8001c8c:	40003800 	.word	0x40003800
 8001c90:	08001895 	.word	0x08001895
 8001c94:	080018c9 	.word	0x080018c9
 8001c98:	0800199d 	.word	0x0800199d
 8001c9c:	08001921 	.word	0x08001921
 8001ca0:	080019d1 	.word	0x080019d1
 8001ca4:	08001955 	.word	0x08001955
 8001ca8:	08001a0d 	.word	0x08001a0d
 8001cac:	08001a41 	.word	0x08001a41

08001cb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3b04      	subs	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f023 0201 	bic.w	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3b04      	subs	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <pxPortInitialiseStack+0x64>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3b14      	subs	r3, #20
 8001cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3b04      	subs	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f06f 0202 	mvn.w	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3b20      	subs	r3, #32
 8001d04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	08001d19 	.word	0x08001d19

08001d18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <prvTaskExitError+0x54>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2a:	d00a      	beq.n	8001d42 <prvTaskExitError+0x2a>
        __asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	60fb      	str	r3, [r7, #12]
    }
 8001d3e:	bf00      	nop
 8001d40:	e7fe      	b.n	8001d40 <prvTaskExitError+0x28>
        __asm volatile
 8001d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	60bb      	str	r3, [r7, #8]
    }
 8001d54:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001d56:	bf00      	nop
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0fc      	beq.n	8001d58 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000000 	.word	0x20000000

08001d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <pxCurrentTCBConst2>)
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	6808      	ldr	r0, [r1, #0]
 8001d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d7a:	f380 8809 	msr	PSP, r0
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	f380 8811 	msr	BASEPRI, r0
 8001d8a:	4770      	bx	lr
 8001d8c:	f3af 8000 	nop.w

08001d90 <pxCurrentTCBConst2>:
 8001d90:	2000c8a4 	.word	0x2000c8a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop

08001d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001d98:	4808      	ldr	r0, [pc, #32]	; (8001dbc <prvPortStartFirstTask+0x24>)
 8001d9a:	6800      	ldr	r0, [r0, #0]
 8001d9c:	6800      	ldr	r0, [r0, #0]
 8001d9e:	f380 8808 	msr	MSP, r0
 8001da2:	f04f 0000 	mov.w	r0, #0
 8001da6:	f380 8814 	msr	CONTROL, r0
 8001daa:	b662      	cpsie	i
 8001dac:	b661      	cpsie	f
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	df00      	svc	0
 8001db8:	bf00      	nop
 8001dba:	0000      	.short	0x0000
 8001dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop

08001dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <xPortStartScheduler+0x120>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <xPortStartScheduler+0x124>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d10a      	bne.n	8001dea <xPortStartScheduler+0x26>
        __asm volatile
 8001dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd8:	f383 8811 	msr	BASEPRI, r3
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	613b      	str	r3, [r7, #16]
    }
 8001de6:	bf00      	nop
 8001de8:	e7fe      	b.n	8001de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <xPortStartScheduler+0x120>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a3f      	ldr	r2, [pc, #252]	; (8001eec <xPortStartScheduler+0x128>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d10a      	bne.n	8001e0a <xPortStartScheduler+0x46>
        __asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	60fb      	str	r3, [r7, #12]
    }
 8001e06:	bf00      	nop
 8001e08:	e7fe      	b.n	8001e08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <xPortStartScheduler+0x12c>)
 8001e0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	22ff      	movs	r2, #255	; 0xff
 8001e1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <xPortStartScheduler+0x130>)
 8001e30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e38:	e009      	b.n	8001e4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d0ef      	beq.n	8001e3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d00a      	beq.n	8001e7c <xPortStartScheduler+0xb8>
        __asm volatile
 8001e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	60bb      	str	r3, [r7, #8]
    }
 8001e78:	bf00      	nop
 8001e7a:	e7fe      	b.n	8001e7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <xPortStartScheduler+0x134>)
 8001e90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <xPortStartScheduler+0x138>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <xPortStartScheduler+0x138>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <xPortStartScheduler+0x138>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <xPortStartScheduler+0x138>)
 8001eac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001eb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001eb2:	f000 f8db 	bl	800206c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <xPortStartScheduler+0x13c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001ebc:	f000 f8f0 	bl	80020a0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <xPortStartScheduler+0x140>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <xPortStartScheduler+0x140>)
 8001ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001eca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ecc:	f7ff ff64 	bl	8001d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001ed0:	f001 f808 	bl	8002ee4 <vTaskSwitchContext>
    prvTaskExitError();
 8001ed4:	f7ff ff20 	bl	8001d18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00
 8001ee8:	410fc271 	.word	0x410fc271
 8001eec:	410fc270 	.word	0x410fc270
 8001ef0:	e000e400 	.word	0xe000e400
 8001ef4:	2000c85d 	.word	0x2000c85d
 8001ef8:	2000c860 	.word	0x2000c860
 8001efc:	e000ed20 	.word	0xe000ed20
 8001f00:	20000000 	.word	0x20000000
 8001f04:	e000ef34 	.word	0xe000ef34

08001f08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
        __asm volatile
 8001f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f12:	f383 8811 	msr	BASEPRI, r3
 8001f16:	f3bf 8f6f 	isb	sy
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	607b      	str	r3, [r7, #4]
    }
 8001f20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <vPortEnterCritical+0x58>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <vPortEnterCritical+0x58>)
 8001f2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <vPortEnterCritical+0x58>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10f      	bne.n	8001f54 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <vPortEnterCritical+0x5c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <vPortEnterCritical+0x4c>
        __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	603b      	str	r3, [r7, #0]
    }
 8001f50:	bf00      	nop
 8001f52:	e7fe      	b.n	8001f52 <vPortEnterCritical+0x4a>
    }
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	20000000 	.word	0x20000000
 8001f64:	e000ed04 	.word	0xe000ed04

08001f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <vPortExitCritical+0x50>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <vPortExitCritical+0x24>
        __asm volatile
 8001f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	607b      	str	r3, [r7, #4]
    }
 8001f88:	bf00      	nop
 8001f8a:	e7fe      	b.n	8001f8a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <vPortExitCritical+0x50>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <vPortExitCritical+0x50>)
 8001f94:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <vPortExitCritical+0x50>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <vPortExitCritical+0x42>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001fa8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001fc0:	f3ef 8009 	mrs	r0, PSP
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <pxCurrentTCBConst>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f01e 0f10 	tst.w	lr, #16
 8001fd0:	bf08      	it	eq
 8001fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fda:	6010      	str	r0, [r2, #0]
 8001fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001fe4:	f380 8811 	msr	BASEPRI, r0
 8001fe8:	f3bf 8f4f 	dsb	sy
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f000 ff78 	bl	8002ee4 <vTaskSwitchContext>
 8001ff4:	f04f 0000 	mov.w	r0, #0
 8001ff8:	f380 8811 	msr	BASEPRI, r0
 8001ffc:	bc09      	pop	{r0, r3}
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	6808      	ldr	r0, [r1, #0]
 8002002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002006:	f01e 0f10 	tst.w	lr, #16
 800200a:	bf08      	it	eq
 800200c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002010:	f380 8809 	msr	PSP, r0
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w

08002020 <pxCurrentTCBConst>:
 8002020:	2000c8a4 	.word	0x2000c8a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop

08002028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
        __asm volatile
 800202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	607b      	str	r3, [r7, #4]
    }
 8002040:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002042:	f000 fe5b 	bl	8002cfc <xTaskIncrementTick>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <SysTick_Handler+0x40>)
 800204e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f383 8811 	msr	BASEPRI, r3
    }
 800205e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <vPortSetupTimerInterrupt+0x28>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <vPortSetupTimerInterrupt+0x2c>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <vPortSetupTimerInterrupt+0x30>)
 800207e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002082:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <vPortSetupTimerInterrupt+0x28>)
 8002086:	2207      	movs	r2, #7
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e010 	.word	0xe000e010
 8002098:	e000e018 	.word	0xe000e018
 800209c:	e000e014 	.word	0xe000e014

080020a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80020a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80020b0 <vPortEnableVFP+0x10>
 80020a4:	6801      	ldr	r1, [r0, #0]
 80020a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80020aa:	6001      	str	r1, [r0, #0]
 80020ac:	4770      	bx	lr
 80020ae:	0000      	.short	0x0000
 80020b0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop

080020b8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80020c2:	2301      	movs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <xQueueGenericReset+0x2e>
        __asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	60fb      	str	r3, [r7, #12]
    }
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d052      	beq.n	8002192 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d04e      	beq.n	8002192 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	2100      	movs	r1, #0
 80020fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d000      	beq.n	8002108 <xQueueGenericReset+0x50>
 8002106:	2101      	movs	r1, #1
 8002108:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d141      	bne.n	8002192 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 800210e:	f7ff fefb 	bl	8001f08 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	441a      	add	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2200      	movs	r2, #0
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	3b01      	subs	r3, #1
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	441a      	add	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	22ff      	movs	r2, #255	; 0xff
 8002152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00f      	beq.n	800218c <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	3310      	adds	r3, #16
 8002170:	4618      	mov	r0, r3
 8002172:	f000 ff7d 	bl	8003070 <xTaskRemoveFromEventList>
 8002176:	e009      	b.n	800218c <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3310      	adds	r3, #16
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff faf9 	bl	8001774 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3324      	adds	r3, #36	; 0x24
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff faf4 	bl	8001774 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800218c:	f7ff feec 	bl	8001f68 <vPortExitCritical>
 8002190:	e001      	b.n	8002196 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xQueueGenericReset+0xfa>
        __asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	60bb      	str	r3, [r7, #8]
    }
 80021ae:	bf00      	nop
 80021b0:	e7fe      	b.n	80021b0 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80021b2:	697b      	ldr	r3, [r7, #20]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	4613      	mov	r3, r2
 80021c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d02e      	beq.n	8002232 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021d4:	2100      	movs	r1, #0
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	fba3 2302 	umull	r2, r3, r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d000      	beq.n	80021e4 <xQueueGenericCreate+0x28>
 80021e2:	2101      	movs	r1, #1
 80021e4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d123      	bne.n	8002232 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021f2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80021f6:	d81c      	bhi.n	8002232 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	3350      	adds	r3, #80	; 0x50
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f8b6 	bl	8001378 <pvPortMalloc>
 800220c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01c      	beq.n	800224e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3350      	adds	r3, #80	; 0x50
 800221c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800221e:	79fa      	ldrb	r2, [r7, #7]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f814 	bl	8002258 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002230:	e00d      	b.n	800224e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <xQueueGenericCreate+0x92>
        __asm volatile
 8002238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	613b      	str	r3, [r7, #16]
    }
 800224a:	bf00      	nop
 800224c:	e7fe      	b.n	800224c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800224e:	69fb      	ldr	r3, [r7, #28]
    }
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d103      	bne.n	8002274 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e002      	b.n	800227a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002286:	2101      	movs	r1, #1
 8002288:	69b8      	ldr	r0, [r7, #24]
 800228a:	f7ff ff15 	bl	80020b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <xQueueReceive+0x30>
        __asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	623b      	str	r3, [r7, #32]
    }
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <xQueueReceive+0x3e>
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <xQueueReceive+0x42>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <xQueueReceive+0x44>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xQueueReceive+0x5e>
        __asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	61fb      	str	r3, [r7, #28]
    }
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022fe:	f001 f8c1 	bl	8003484 <xTaskGetSchedulerState>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <xQueueReceive+0x6e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <xQueueReceive+0x72>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <xQueueReceive+0x74>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <xQueueReceive+0x8e>
        __asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	61bb      	str	r3, [r7, #24]
    }
 800232a:	bf00      	nop
 800232c:	e7fe      	b.n	800232c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800232e:	f7ff fdeb 	bl	8001f08 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d014      	beq.n	8002368 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002342:	f000 f881 	bl	8002448 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fe88 	bl	8003070 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002360:	f7ff fe02 	bl	8001f68 <vPortExitCritical>
                return pdPASS;
 8002364:	2301      	movs	r3, #1
 8002366:	e069      	b.n	800243c <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800236e:	f7ff fdfb 	bl	8001f68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002372:	2300      	movs	r3, #0
 8002374:	e062      	b.n	800243c <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f000 ff4b 	bl	800321c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002386:	2301      	movs	r3, #1
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800238a:	f7ff fded 	bl	8001f68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800238e:	f000 fba9 	bl	8002ae4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002392:	f7ff fdb9 	bl	8001f08 <vPortEnterCritical>
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800239c:	b25b      	sxtb	r3, r3
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d103      	bne.n	80023ac <xQueueReceive+0x10c>
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d103      	bne.n	80023c2 <xQueueReceive+0x122>
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023c2:	f7ff fdd1 	bl	8001f68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023c6:	1d3a      	adds	r2, r7, #4
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 ff3a 	bl	8003248 <xTaskCheckForTimeOut>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d123      	bne.n	8002422 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023dc:	f000 f8ac 	bl	8002538 <prvIsQueueEmpty>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d017      	beq.n	8002416 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	3324      	adds	r3, #36	; 0x24
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fdd4 	bl	8002f9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023f6:	f000 f84d 	bl	8002494 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80023fa:	f000 fb81 	bl	8002b00 <xTaskResumeAll>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d194      	bne.n	800232e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <xQueueReceive+0x1a4>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	e78b      	b.n	800232e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002418:	f000 f83c 	bl	8002494 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800241c:	f000 fb70 	bl	8002b00 <xTaskResumeAll>
 8002420:	e785      	b.n	800232e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002424:	f000 f836 	bl	8002494 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002428:	f000 fb6a 	bl	8002b00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800242c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800242e:	f000 f883 	bl	8002538 <prvIsQueueEmpty>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f43f af7a 	beq.w	800232e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800243a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800243c:	4618      	mov	r0, r3
 800243e:	3730      	adds	r7, #48	; 0x30
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d018      	beq.n	800248c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	441a      	add	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	429a      	cmp	r2, r3
 8002472:	d303      	bcc.n	800247c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68d9      	ldr	r1, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	461a      	mov	r2, r3
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f001 fb6c 	bl	8003b64 <memcpy>
    }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800249c:	f7ff fd34 	bl	8001f08 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024a8:	e011      	b.n	80024ce <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3324      	adds	r3, #36	; 0x24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fdda 	bl	8003070 <xTaskRemoveFromEventList>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80024c2:	f000 ff27 	bl	8003314 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	dce9      	bgt.n	80024aa <prvUnlockQueue+0x16>
 80024d6:	e000      	b.n	80024da <prvUnlockQueue+0x46>
                        break;
 80024d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80024e2:	f7ff fd41 	bl	8001f68 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024e6:	f7ff fd0f 	bl	8001f08 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024f2:	e011      	b.n	8002518 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d012      	beq.n	8002522 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3310      	adds	r3, #16
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fdb5 	bl	8003070 <xTaskRemoveFromEventList>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800250c:	f000 ff02 	bl	8003314 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002510:	7bbb      	ldrb	r3, [r7, #14]
 8002512:	3b01      	subs	r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800251c:	2b00      	cmp	r3, #0
 800251e:	dce9      	bgt.n	80024f4 <prvUnlockQueue+0x60>
 8002520:	e000      	b.n	8002524 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002522:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800252c:	f7ff fd1c 	bl	8001f68 <vPortExitCritical>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002540:	f7ff fce2 	bl	8001f08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800254c:	2301      	movs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e001      	b.n	8002556 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002556:	f7ff fd07 	bl	8001f68 <vPortExitCritical>

    return xReturn;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	60fb      	str	r3, [r7, #12]
    }
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d024      	beq.n	80025de <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e01e      	b.n	80025d8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800259a:	4a18      	ldr	r2, [pc, #96]	; (80025fc <vQueueAddToRegistry+0x98>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d105      	bne.n	80025b6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <vQueueAddToRegistry+0x98>)
 80025b0:	4413      	add	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
                    break;
 80025b4:	e013      	b.n	80025de <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <vQueueAddToRegistry+0x6e>
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <vQueueAddToRegistry+0x98>)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <vQueueAddToRegistry+0x98>)
 80025ce:	4413      	add	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b07      	cmp	r3, #7
 80025dc:	d9dd      	bls.n	800259a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	2000c864 	.word	0x2000c864

08002600 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002610:	f7ff fc7a 	bl	8001f08 <vPortEnterCritical>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800261a:	b25b      	sxtb	r3, r3
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d103      	bne.n	800262a <vQueueWaitForMessageRestricted+0x2a>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002630:	b25b      	sxtb	r3, r3
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002636:	d103      	bne.n	8002640 <vQueueWaitForMessageRestricted+0x40>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002640:	f7ff fc92 	bl	8001f68 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3324      	adds	r3, #36	; 0x24
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fcc5 	bl	8002fe4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff1a 	bl	8002494 <prvUnlockQueue>
    }
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af04      	add	r7, sp, #16
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fe7b 	bl	8001378 <pvPortMalloc>
 8002682:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800268a:	2058      	movs	r0, #88	; 0x58
 800268c:	f7fe fe74 	bl	8001378 <pvPortMalloc>
 8002690:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
 800269e:	e005      	b.n	80026ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f7fe ff49 	bl	8001538 <vPortFree>
 80026a6:	e001      	b.n	80026ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d013      	beq.n	80026da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	2300      	movs	r3, #0
 80026b6:	9303      	str	r3, [sp, #12]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	9302      	str	r3, [sp, #8]
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f80e 	bl	80026ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026ce:	69f8      	ldr	r0, [r7, #28]
 80026d0:	f000 f8b0 	bl	8002834 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026d4:	2301      	movs	r3, #1
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	e002      	b.n	80026e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026e0:	69bb      	ldr	r3, [r7, #24]
    }
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b088      	sub	sp, #32
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	461a      	mov	r2, r3
 8002702:	21a5      	movs	r1, #165	; 0xa5
 8002704:	f001 fa3c 	bl	8003b80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002712:	3b01      	subs	r3, #1
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f023 0307 	bic.w	r3, r3, #7
 8002720:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <prvInitialiseNewTask+0x58>
        __asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	617b      	str	r3, [r7, #20]
    }
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01f      	beq.n	8002788 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e012      	b.n	8002774 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	7819      	ldrb	r1, [r3, #0]
 8002756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	3334      	adds	r3, #52	; 0x34
 800275e:	460a      	mov	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b09      	cmp	r3, #9
 8002778:	d9e9      	bls.n	800274e <prvInitialiseNewTask+0x64>
 800277a:	e000      	b.n	800277e <prvInitialiseNewTask+0x94>
            {
                break;
 800277c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002786:	e003      	b.n	8002790 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	2b08      	cmp	r3, #8
 8002794:	d90a      	bls.n	80027ac <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	613b      	str	r3, [r7, #16]
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d901      	bls.n	80027b6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027b2:	2308      	movs	r3, #8
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	2200      	movs	r2, #0
 80027c6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	3304      	adds	r3, #4
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fff1 	bl	80017b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	3318      	adds	r3, #24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ffec 	bl	80017b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	f1c3 0209 	rsb	r2, r3, #9
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	3350      	adds	r3, #80	; 0x50
 80027f6:	2204      	movs	r2, #4
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f9c0 	bl	8003b80 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	3354      	adds	r3, #84	; 0x54
 8002804:	2201      	movs	r2, #1
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f9b9 	bl	8003b80 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	69b8      	ldr	r0, [r7, #24]
 8002814:	f7ff fa4c 	bl	8001cb0 <pxPortInitialiseStack>
 8002818:	4602      	mov	r2, r0
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002828:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800282a:	bf00      	nop
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800283c:	f7ff fb64 	bl	8001f08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <prvAddNewTaskToReadyList+0xf8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a39      	ldr	r2, [pc, #228]	; (800292c <prvAddNewTaskToReadyList+0xf8>)
 8002848:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <prvAddNewTaskToReadyList+0xfc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002852:	4a37      	ldr	r2, [pc, #220]	; (8002930 <prvAddNewTaskToReadyList+0xfc>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <prvAddNewTaskToReadyList+0xf8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d110      	bne.n	8002882 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002860:	f000 fd76 	bl	8003350 <prvInitialiseTaskLists>
 8002864:	e00d      	b.n	8002882 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002866:	4b33      	ldr	r3, [pc, #204]	; (8002934 <prvAddNewTaskToReadyList+0x100>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <prvAddNewTaskToReadyList+0xfc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	429a      	cmp	r2, r3
 800287a:	d802      	bhi.n	8002882 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <prvAddNewTaskToReadyList+0xfc>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <prvAddNewTaskToReadyList+0x104>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <prvAddNewTaskToReadyList+0x104>)
 800288a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <prvAddNewTaskToReadyList+0x104>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	2201      	movs	r2, #1
 800289a:	409a      	lsls	r2, r3
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <prvAddNewTaskToReadyList+0x108>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	4a26      	ldr	r2, [pc, #152]	; (800293c <prvAddNewTaskToReadyList+0x108>)
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	4925      	ldr	r1, [pc, #148]	; (8002940 <prvAddNewTaskToReadyList+0x10c>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	3204      	adds	r2, #4
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <prvAddNewTaskToReadyList+0x10c>)
 80028ea:	441a      	add	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f4:	4912      	ldr	r1, [pc, #72]	; (8002940 <prvAddNewTaskToReadyList+0x10c>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1c59      	adds	r1, r3, #1
 8002904:	480e      	ldr	r0, [pc, #56]	; (8002940 <prvAddNewTaskToReadyList+0x10c>)
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4403      	add	r3, r0
 8002910:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002912:	f7ff fb29 	bl	8001f68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <prvAddNewTaskToReadyList+0x100>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <prvAddNewTaskToReadyList+0xfc>)
 8002920:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000c9cc 	.word	0x2000c9cc
 8002930:	2000c8a4 	.word	0x2000c8a4
 8002934:	2000c9d8 	.word	0x2000c9d8
 8002938:	2000c9e8 	.word	0x2000c9e8
 800293c:	2000c9d4 	.word	0x2000c9d4
 8002940:	2000c8a8 	.word	0x2000c8a8

08002944 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xTaskDelayUntil+0x2a>
        __asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	617b      	str	r3, [r7, #20]
    }
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <xTaskDelayUntil+0x46>
        __asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	613b      	str	r3, [r7, #16]
    }
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <xTaskDelayUntil+0xf0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <xTaskDelayUntil+0x64>
        __asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60fb      	str	r3, [r7, #12]
    }
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80029a8:	f000 f89c 	bl	8002ae4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <xTaskDelayUntil+0xf4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a3a      	ldr	r2, [r7, #32]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d20b      	bcs.n	80029de <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d211      	bcs.n	80029f4 <xTaskDelayUntil+0xb0>
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d90d      	bls.n	80029f4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	e00a      	b.n	80029f4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d303      	bcc.n	80029f0 <xTaskDelayUntil+0xac>
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d901      	bls.n	80029f4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80029f0:	2301      	movs	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fd59 	bl	80034c0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002a0e:	f000 f877 	bl	8002b00 <xTaskResumeAll>
 8002a12:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <xTaskDelayUntil+0xf8>)
 8002a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2000c9f4 	.word	0x2000c9f4
 8002a38:	2000c9d0 	.word	0x2000c9d0
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <vTaskStartScheduler+0x88>)
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	491e      	ldr	r1, [pc, #120]	; (8002acc <vTaskStartScheduler+0x8c>)
 8002a54:	481e      	ldr	r0, [pc, #120]	; (8002ad0 <vTaskStartScheduler+0x90>)
 8002a56:	f7ff fe07 	bl	8002668 <xTaskCreate>
 8002a5a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002a62:	f000 fdad 	bl	80035c0 <xTimerCreateTimerTask>
 8002a66:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d116      	bne.n	8002a9c <vTaskStartScheduler+0x5c>
        __asm volatile
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	60bb      	str	r3, [r7, #8]
    }
 8002a80:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <vTaskStartScheduler+0x94>)
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <vTaskStartScheduler+0x98>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <vTaskStartScheduler+0x9c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a96:	f7ff f995 	bl	8001dc4 <xPortStartScheduler>
 8002a9a:	e00e      	b.n	8002aba <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d10a      	bne.n	8002aba <vTaskStartScheduler+0x7a>
        __asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	607b      	str	r3, [r7, #4]
    }
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <vTaskStartScheduler+0xa0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000c9f0 	.word	0x2000c9f0
 8002acc:	08003ba8 	.word	0x08003ba8
 8002ad0:	0800332d 	.word	0x0800332d
 8002ad4:	2000c9ec 	.word	0x2000c9ec
 8002ad8:	2000c9d8 	.word	0x2000c9d8
 8002adc:	2000c9d0 	.word	0x2000c9d0
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <vTaskSuspendAll+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	4a03      	ldr	r2, [pc, #12]	; (8002afc <vTaskSuspendAll+0x18>)
 8002af0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	2000c9f4 	.word	0x2000c9f4

08002b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b0e:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <xTaskResumeAll+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <xTaskResumeAll+0x2c>
        __asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	607b      	str	r3, [r7, #4]
    }
 8002b28:	bf00      	nop
 8002b2a:	e7fe      	b.n	8002b2a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b2c:	f7ff f9ec 	bl	8001f08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b30:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <xTaskResumeAll+0x1bc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	4a61      	ldr	r2, [pc, #388]	; (8002cbc <xTaskResumeAll+0x1bc>)
 8002b38:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b3a:	4b60      	ldr	r3, [pc, #384]	; (8002cbc <xTaskResumeAll+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 80b4 	bne.w	8002cac <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b44:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <xTaskResumeAll+0x1c0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80af 	beq.w	8002cac <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b4e:	e08a      	b.n	8002c66 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b50:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <xTaskResumeAll+0x1c4>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	6a12      	ldr	r2, [r2, #32]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	69d2      	ldr	r2, [r2, #28]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3318      	adds	r3, #24
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d103      	bne.n	8002b86 <xTaskResumeAll+0x86>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	68d2      	ldr	r2, [r2, #12]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d103      	bne.n	8002bc4 <xTaskResumeAll+0xc4>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	615a      	str	r2, [r3, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <xTaskResumeAll+0x1c8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	4a39      	ldr	r2, [pc, #228]	; (8002cc8 <xTaskResumeAll+0x1c8>)
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bea:	4938      	ldr	r1, [pc, #224]	; (8002ccc <xTaskResumeAll+0x1cc>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	3204      	adds	r2, #4
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <xTaskResumeAll+0x1cc>)
 8002c2a:	441a      	add	r2, r3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	615a      	str	r2, [r3, #20]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	4925      	ldr	r1, [pc, #148]	; (8002ccc <xTaskResumeAll+0x1cc>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	4821      	ldr	r0, [pc, #132]	; (8002ccc <xTaskResumeAll+0x1cc>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4403      	add	r3, r0
 8002c50:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <xTaskResumeAll+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <xTaskResumeAll+0x1d4>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <xTaskResumeAll+0x1c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f47f af70 	bne.w	8002b50 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c76:	f000 fbe9 	bl	800344c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <xTaskResumeAll+0x1d8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c86:	f000 f839 	bl	8002cfc <xTaskIncrementTick>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <xTaskResumeAll+0x1d4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f1      	bne.n	8002c86 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <xTaskResumeAll+0x1d8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <xTaskResumeAll+0x1d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cac:	f7ff f95c 	bl	8001f68 <vPortExitCritical>

    return xAlreadyYielded;
 8002cb0:	697b      	ldr	r3, [r7, #20]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000c9f4 	.word	0x2000c9f4
 8002cc0:	2000c9cc 	.word	0x2000c9cc
 8002cc4:	2000c98c 	.word	0x2000c98c
 8002cc8:	2000c9d4 	.word	0x2000c9d4
 8002ccc:	2000c8a8 	.word	0x2000c8a8
 8002cd0:	2000c8a4 	.word	0x2000c8a4
 8002cd4:	2000c9e0 	.word	0x2000c9e0
 8002cd8:	2000c9dc 	.word	0x2000c9dc

08002cdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <xTaskGetTickCount+0x1c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ce8:	687b      	ldr	r3, [r7, #4]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2000c9d0 	.word	0x2000c9d0

08002cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d06:	4b6e      	ldr	r3, [pc, #440]	; (8002ec0 <xTaskIncrementTick+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 80cd 	bne.w	8002eaa <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d10:	4b6c      	ldr	r3, [pc, #432]	; (8002ec4 <xTaskIncrementTick+0x1c8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <xTaskIncrementTick+0x1c8>)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d120      	bne.n	8002d66 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d24:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <xTaskIncrementTick+0x1cc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	607b      	str	r3, [r7, #4]
    }
 8002d40:	bf00      	nop
 8002d42:	e7fe      	b.n	8002d42 <xTaskIncrementTick+0x46>
 8002d44:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <xTaskIncrementTick+0x1cc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	4b60      	ldr	r3, [pc, #384]	; (8002ecc <xTaskIncrementTick+0x1d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <xTaskIncrementTick+0x1cc>)
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4a5e      	ldr	r2, [pc, #376]	; (8002ecc <xTaskIncrementTick+0x1d0>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <xTaskIncrementTick+0x1d4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	4a5c      	ldr	r2, [pc, #368]	; (8002ed0 <xTaskIncrementTick+0x1d4>)
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	f000 fb73 	bl	800344c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d66:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <xTaskIncrementTick+0x1d8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a3a      	ldr	r2, [r7, #32]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f0c0 80a1 	bcc.w	8002eb4 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <xTaskIncrementTick+0x1cc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d7c:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <xTaskIncrementTick+0x1d8>)
 8002d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d82:	601a      	str	r2, [r3, #0]
                    break;
 8002d84:	e096      	b.n	8002eb4 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d86:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <xTaskIncrementTick+0x1cc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d96:	6a3a      	ldr	r2, [r7, #32]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d203      	bcs.n	8002da6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d9e:	4a4d      	ldr	r2, [pc, #308]	; (8002ed4 <xTaskIncrementTick+0x1d8>)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002da4:	e086      	b.n	8002eb4 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	68d2      	ldr	r2, [r2, #12]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	6892      	ldr	r2, [r2, #8]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d103      	bne.n	8002dd4 <xTaskIncrementTick+0xd8>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01e      	beq.n	8002e2a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	6a12      	ldr	r2, [r2, #32]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	69d2      	ldr	r2, [r2, #28]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d103      	bne.n	8002e1a <xTaskIncrementTick+0x11e>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <xTaskIncrementTick+0x1dc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <xTaskIncrementTick+0x1dc>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	4926      	ldr	r1, [pc, #152]	; (8002edc <xTaskIncrementTick+0x1e0>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	3204      	adds	r2, #4
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	1d1a      	adds	r2, r3, #4
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <xTaskIncrementTick+0x1e0>)
 8002e80:	441a      	add	r2, r3
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8a:	4914      	ldr	r1, [pc, #80]	; (8002edc <xTaskIncrementTick+0x1e0>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1c59      	adds	r1, r3, #1
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <xTaskIncrementTick+0x1e0>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4403      	add	r3, r0
 8002ea6:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea8:	e763      	b.n	8002d72 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <xTaskIncrementTick+0x1e4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <xTaskIncrementTick+0x1e4>)
 8002eb2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000c9f4 	.word	0x2000c9f4
 8002ec4:	2000c9d0 	.word	0x2000c9d0
 8002ec8:	2000c984 	.word	0x2000c984
 8002ecc:	2000c988 	.word	0x2000c988
 8002ed0:	2000c9e4 	.word	0x2000c9e4
 8002ed4:	2000c9ec 	.word	0x2000c9ec
 8002ed8:	2000c9d4 	.word	0x2000c9d4
 8002edc:	2000c8a8 	.word	0x2000c8a8
 8002ee0:	2000c9dc 	.word	0x2000c9dc

08002ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eea:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <vTaskSwitchContext+0xa4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <vTaskSwitchContext+0xa8>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ef8:	e03f      	b.n	8002f7a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <vTaskSwitchContext+0xa8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <vTaskSwitchContext+0xac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f1c3 031f 	rsb	r3, r3, #31
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	491f      	ldr	r1, [pc, #124]	; (8002f94 <vTaskSwitchContext+0xb0>)
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	607b      	str	r3, [r7, #4]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <vTaskSwitchContext+0x5a>
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <vTaskSwitchContext+0xb0>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3308      	adds	r3, #8
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d104      	bne.n	8002f70 <vTaskSwitchContext+0x8c>
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <vTaskSwitchContext+0xb4>)
 8002f78:	6013      	str	r3, [r2, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000c9f4 	.word	0x2000c9f4
 8002f8c:	2000c9e0 	.word	0x2000c9e0
 8002f90:	2000c9d4 	.word	0x2000c9d4
 8002f94:	2000c8a8 	.word	0x2000c8a8
 8002f98:	2000c8a4 	.word	0x2000c8a4

08002f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	60fb      	str	r3, [r7, #12]
    }
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <vTaskPlaceOnEventList+0x44>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fbff 	bl	80017ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	f000 fa74 	bl	80034c0 <prvAddCurrentTaskToDelayedList>
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	2000c8a4 	.word	0x2000c8a4

08002fe4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	613b      	str	r3, [r7, #16]
    }
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <vTaskPlaceOnEventListRestricted+0x88>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	61da      	str	r2, [r3, #28]
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <vTaskPlaceOnEventListRestricted+0x88>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	621a      	str	r2, [r3, #32]
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <vTaskPlaceOnEventListRestricted+0x88>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	3218      	adds	r2, #24
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <vTaskPlaceOnEventListRestricted+0x88>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f103 0218 	add.w	r2, r3, #24
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <vTaskPlaceOnEventListRestricted+0x88>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295
 8003058:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68b8      	ldr	r0, [r7, #8]
 800305e:	f000 fa2f 	bl	80034c0 <prvAddCurrentTaskToDelayedList>
    }
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000c8a4 	.word	0x2000c8a4

08003070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003070:	b480      	push	{r7}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	60fb      	str	r3, [r7, #12]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	6a3a      	ldr	r2, [r7, #32]
 80030a8:	6a12      	ldr	r2, [r2, #32]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	69d2      	ldr	r2, [r2, #28]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	3318      	adds	r3, #24
 80030be:	429a      	cmp	r2, r3
 80030c0:	d103      	bne.n	80030ca <xTaskRemoveFromEventList+0x5a>
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030da:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <xTaskRemoveFromEventList+0x194>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d15e      	bne.n	80031a0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	68d2      	ldr	r2, [r2, #12]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	3304      	adds	r3, #4
 8003104:	429a      	cmp	r2, r3
 8003106:	d103      	bne.n	8003110 <xTaskRemoveFromEventList+0xa0>
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <xTaskRemoveFromEventList+0x198>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	4a36      	ldr	r2, [pc, #216]	; (8003208 <xTaskRemoveFromEventList+0x198>)
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	4935      	ldr	r1, [pc, #212]	; (800320c <xTaskRemoveFromEventList+0x19c>)
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3304      	adds	r3, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	3204      	adds	r2, #4
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <xTaskRemoveFromEventList+0x19c>)
 8003176:	441a      	add	r2, r3
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	615a      	str	r2, [r3, #20]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	4922      	ldr	r1, [pc, #136]	; (800320c <xTaskRemoveFromEventList+0x19c>)
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	481e      	ldr	r0, [pc, #120]	; (800320c <xTaskRemoveFromEventList+0x19c>)
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4403      	add	r3, r0
 800319c:	6019      	str	r1, [r3, #0]
 800319e:	e01b      	b.n	80031d8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	61da      	str	r2, [r3, #28]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	621a      	str	r2, [r3, #32]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	3218      	adds	r2, #24
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f103 0218 	add.w	r2, r3, #24
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 80031d6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <xTaskRemoveFromEventList+0x1a4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d905      	bls.n	80031f2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031e6:	2301      	movs	r3, #1
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <xTaskRemoveFromEventList+0x1a8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e001      	b.n	80031f6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	372c      	adds	r7, #44	; 0x2c
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	2000c9f4 	.word	0x2000c9f4
 8003208:	2000c9d4 	.word	0x2000c9d4
 800320c:	2000c8a8 	.word	0x2000c8a8
 8003210:	2000c98c 	.word	0x2000c98c
 8003214:	2000c8a4 	.word	0x2000c8a4
 8003218:	2000c9e0 	.word	0x2000c9e0

0800321c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <vTaskInternalSetTimeOutState+0x24>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <vTaskInternalSetTimeOutState+0x28>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	605a      	str	r2, [r3, #4]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	2000c9e4 	.word	0x2000c9e4
 8003244:	2000c9d0 	.word	0x2000c9d0

08003248 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	613b      	str	r3, [r7, #16]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
    }
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800328a:	f7fe fe3d 	bl	8001f08 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <xTaskCheckForTimeOut+0xc4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d102      	bne.n	80032ae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	e026      	b.n	80032fc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <xTaskCheckForTimeOut+0xc8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d00a      	beq.n	80032d0 <xTaskCheckForTimeOut+0x88>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d305      	bcc.n	80032d0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e015      	b.n	80032fc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20b      	bcs.n	80032f2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad2      	subs	r2, r2, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ff98 	bl	800321c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e004      	b.n	80032fc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032fc:	f7fe fe34 	bl	8001f68 <vPortExitCritical>

    return xReturn;
 8003300:	69fb      	ldr	r3, [r7, #28]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000c9d0 	.word	0x2000c9d0
 8003310:	2000c9e4 	.word	0x2000c9e4

08003314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <vTaskMissedYield+0x14>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	2000c9e0 	.word	0x2000c9e0

0800332c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003334:	f000 f84c 	bl	80033d0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <prvIdleTask+0x20>)
 800333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003348:	e7f4      	b.n	8003334 <prvIdleTask+0x8>
 800334a:	bf00      	nop
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	e00c      	b.n	8003376 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <prvInitialiseTaskLists+0x60>)
 8003368:	4413      	add	r3, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fa02 	bl	8001774 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3301      	adds	r3, #1
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d9ef      	bls.n	800335c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800337c:	480d      	ldr	r0, [pc, #52]	; (80033b4 <prvInitialiseTaskLists+0x64>)
 800337e:	f7fe f9f9 	bl	8001774 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003382:	480d      	ldr	r0, [pc, #52]	; (80033b8 <prvInitialiseTaskLists+0x68>)
 8003384:	f7fe f9f6 	bl	8001774 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <prvInitialiseTaskLists+0x6c>)
 800338a:	f7fe f9f3 	bl	8001774 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800338e:	480c      	ldr	r0, [pc, #48]	; (80033c0 <prvInitialiseTaskLists+0x70>)
 8003390:	f7fe f9f0 	bl	8001774 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003394:	480b      	ldr	r0, [pc, #44]	; (80033c4 <prvInitialiseTaskLists+0x74>)
 8003396:	f7fe f9ed 	bl	8001774 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <prvInitialiseTaskLists+0x78>)
 800339c:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <prvInitialiseTaskLists+0x64>)
 800339e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <prvInitialiseTaskLists+0x7c>)
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <prvInitialiseTaskLists+0x68>)
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000c8a8 	.word	0x2000c8a8
 80033b4:	2000c95c 	.word	0x2000c95c
 80033b8:	2000c970 	.word	0x2000c970
 80033bc:	2000c98c 	.word	0x2000c98c
 80033c0:	2000c9a0 	.word	0x2000c9a0
 80033c4:	2000c9b8 	.word	0x2000c9b8
 80033c8:	2000c984 	.word	0x2000c984
 80033cc:	2000c988 	.word	0x2000c988

080033d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d6:	e019      	b.n	800340c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033d8:	f7fe fd96 	bl	8001f08 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <prvCheckTasksWaitingTermination+0x50>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe fa29 	bl	8001840 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <prvCheckTasksWaitingTermination+0x54>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <prvCheckTasksWaitingTermination+0x54>)
 80033f6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <prvCheckTasksWaitingTermination+0x58>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <prvCheckTasksWaitingTermination+0x58>)
 8003400:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003402:	f7fe fdb1 	bl	8001f68 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f810 	bl	800342c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <prvCheckTasksWaitingTermination+0x58>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e1      	bne.n	80033d8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000c9a0 	.word	0x2000c9a0
 8003424:	2000c9cc 	.word	0x2000c9cc
 8003428:	2000c9b4 	.word	0x2000c9b4

0800342c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe f87d 	bl	8001538 <vPortFree>
                vPortFree( pxTCB );
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe f87a 	bl	8001538 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <prvResetNextTaskUnblockTime+0x30>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <prvResetNextTaskUnblockTime+0x34>)
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003462:	e005      	b.n	8003470 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <prvResetNextTaskUnblockTime+0x30>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a04      	ldr	r2, [pc, #16]	; (8003480 <prvResetNextTaskUnblockTime+0x34>)
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000c984 	.word	0x2000c984
 8003480:	2000c9ec 	.word	0x2000c9ec

08003484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <xTaskGetSchedulerState+0x34>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003492:	2301      	movs	r3, #1
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	e008      	b.n	80034aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <xTaskGetSchedulerState+0x38>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034a0:	2302      	movs	r3, #2
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	e001      	b.n	80034aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034aa:	687b      	ldr	r3, [r7, #4]
    }
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	2000c9d8 	.word	0x2000c9d8
 80034bc:	2000c9f4 	.word	0x2000c9f4

080034c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f9b2 	bl	8001840 <uxListRemove>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034e2:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <prvAddCurrentTaskToDelayedList+0xec>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4013      	ands	r3, r2
 80034f6:	4a2d      	ldr	r2, [pc, #180]	; (80035ac <prvAddCurrentTaskToDelayedList+0xec>)
 80034f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d124      	bne.n	800354c <prvAddCurrentTaskToDelayedList+0x8c>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d021      	beq.n	800354c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	3204      	adds	r2, #4
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800353c:	615a      	str	r2, [r3, #20]
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800354a:	e026      	b.n	800359a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	d209      	bcs.n	8003578 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003564:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f7fe f92c 	bl	80017ce <vListInsert>
}
 8003576:	e010      	b.n	800359a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f7fe f922 	bl	80017ce <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <prvAddCurrentTaskToDelayedList+0xfc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d202      	bcs.n	800359a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003594:	4a09      	ldr	r2, [pc, #36]	; (80035bc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000c9d0 	.word	0x2000c9d0
 80035a8:	2000c8a4 	.word	0x2000c8a4
 80035ac:	2000c9d4 	.word	0x2000c9d4
 80035b0:	2000c9b8 	.word	0x2000c9b8
 80035b4:	2000c988 	.word	0x2000c988
 80035b8:	2000c984 	.word	0x2000c984
 80035bc:	2000c9ec 	.word	0x2000c9ec

080035c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035ca:	f000 fa47 	bl	8003a5c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <xTimerCreateTimerTask+0x54>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <xTimerCreateTimerTask+0x58>)
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	2301      	movs	r3, #1
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2300      	movs	r3, #0
 80035e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e4:	490d      	ldr	r1, [pc, #52]	; (800361c <xTimerCreateTimerTask+0x5c>)
 80035e6:	480e      	ldr	r0, [pc, #56]	; (8003620 <xTimerCreateTimerTask+0x60>)
 80035e8:	f7ff f83e 	bl	8002668 <xTaskCreate>
 80035ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	603b      	str	r3, [r7, #0]
    }
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800360a:	687b      	ldr	r3, [r7, #4]
    }
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000ca28 	.word	0x2000ca28
 8003618:	2000ca2c 	.word	0x2000ca2c
 800361c:	08003bb0 	.word	0x08003bb0
 8003620:	080036c9 	.word	0x080036c9

08003624 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003630:	e008      	b.n	8003644 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4413      	add	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	18d1      	adds	r1, r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f8dd 	bl	8003810 <prvInsertTimerInActiveList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ea      	bne.n	8003632 <prvReloadTimer+0xe>
        }
    }
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <prvProcessExpiredTimer+0x5c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3304      	adds	r3, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe f8dd 	bl	8001840 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff ffc3 	bl	8003624 <prvReloadTimer>
 800369e:	e008      	b.n	80036b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	4798      	blx	r3
    }
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000ca20 	.word	0x2000ca20

080036c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f857 	bl	8003788 <prvGetNextExpireTime>
 80036da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4619      	mov	r1, r3
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f803 	bl	80036ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036e6:	f000 f8d5 	bl	8003894 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036ea:	e7f1      	b.n	80036d0 <prvTimerTask+0x8>

080036ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036f6:	f7ff f9f5 	bl	8002ae4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f866 	bl	80037d0 <prvSampleTimeNow>
 8003704:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d130      	bne.n	800376e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <prvProcessTimerOrBlockTask+0x3c>
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d806      	bhi.n	8003728 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800371a:	f7ff f9f1 	bl	8002b00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffa1 	bl	8003668 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003726:	e024      	b.n	8003772 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <prvProcessTimerOrBlockTask+0x90>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <prvProcessTimerOrBlockTask+0x50>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <prvProcessTimerOrBlockTask+0x52>
 800373c:	2300      	movs	r3, #0
 800373e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <prvProcessTimerOrBlockTask+0x94>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	f7fe ff57 	bl	8002600 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003752:	f7ff f9d5 	bl	8002b00 <xTaskResumeAll>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <prvProcessTimerOrBlockTask+0x98>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
    }
 800376c:	e001      	b.n	8003772 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800376e:	f7ff f9c7 	bl	8002b00 <xTaskResumeAll>
    }
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000ca24 	.word	0x2000ca24
 8003780:	2000ca28 	.word	0x2000ca28
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <prvGetNextExpireTime+0x44>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <prvGetNextExpireTime+0x16>
 800379a:	2201      	movs	r2, #1
 800379c:	e000      	b.n	80037a0 <prvGetNextExpireTime+0x18>
 800379e:	2200      	movs	r2, #0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <prvGetNextExpireTime+0x44>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e001      	b.n	80037bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037bc:	68fb      	ldr	r3, [r7, #12]
    }
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	2000ca20 	.word	0x2000ca20

080037d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037d8:	f7ff fa80 	bl	8002cdc <xTaskGetTickCount>
 80037dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <prvSampleTimeNow+0x3c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d205      	bcs.n	80037f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037e8:	f000 f912 	bl	8003a10 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e002      	b.n	80037fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <prvSampleTimeNow+0x3c>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003800:	68fb      	ldr	r3, [r7, #12]
    }
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000ca30 	.word	0x2000ca30

08003810 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d812      	bhi.n	800385c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e01b      	b.n	8003882 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <prvInsertTimerInActiveList+0x7c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fd ffba 	bl	80017ce <vListInsert>
 800385a:	e012      	b.n	8003882 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d206      	bcs.n	8003872 <prvInsertTimerInActiveList+0x62>
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e007      	b.n	8003882 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <prvInsertTimerInActiveList+0x80>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fd ffa6 	bl	80017ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003882:	697b      	ldr	r3, [r7, #20]
    }
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	2000ca24 	.word	0x2000ca24
 8003890:	2000ca20 	.word	0x2000ca20

08003894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800389a:	e0a6      	b.n	80039ea <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f2c0 80a2 	blt.w	80039e8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd ffc3 	bl	8001840 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff87 	bl	80037d0 <prvSampleTimeNow>
 80038c2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	f200 808e 	bhi.w	80039ea <prvProcessReceivedCommands+0x156>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <prvProcessReceivedCommands+0x40>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	080038f9 	.word	0x080038f9
 80038dc:	08003961 	.word	0x08003961
 80038e0:	08003975 	.word	0x08003975
 80038e4:	080039bf 	.word	0x080039bf
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	080038f9 	.word	0x080038f9
 80038f0:	08003961 	.word	0x08003961
 80038f4:	08003975 	.word	0x08003975
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	18d1      	adds	r1, r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	69f8      	ldr	r0, [r7, #28]
 8003918:	f7ff ff7a 	bl	8003810 <prvInsertTimerInActiveList>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	4413      	add	r3, r2
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4619      	mov	r1, r3
 800393c:	69f8      	ldr	r0, [r7, #28]
 800393e:	f7ff fe71 	bl	8003624 <prvReloadTimer>
 8003942:	e008      	b.n	8003956 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	69f8      	ldr	r0, [r7, #28]
 800395c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800395e:	e044      	b.n	80039ea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003972:	e03a      	b.n	80039ea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	b2da      	uxtb	r2, r3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	617b      	str	r3, [r7, #20]
    }
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	18d1      	adds	r1, r2, r3
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	69f8      	ldr	r0, [r7, #28]
 80039b8:	f7ff ff2a 	bl	8003810 <prvInsertTimerInActiveList>
                        break;
 80039bc:	e015      	b.n	80039ea <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80039cc:	69f8      	ldr	r0, [r7, #28]
 80039ce:	f7fd fdb3 	bl	8001538 <vPortFree>
 80039d2:	e00a      	b.n	80039ea <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039e6:	e000      	b.n	80039ea <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <prvProcessReceivedCommands+0x178>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f107 0108 	add.w	r1, r7, #8
 80039f2:	2200      	movs	r2, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fc53 	bl	80022a0 <xQueueReceive>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af4d 	bne.w	800389c <prvProcessReceivedCommands+0x8>
        }
    }
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	2000ca28 	.word	0x2000ca28

08003a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a16:	e009      	b.n	8003a2c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <prvSwitchTimerLists+0x44>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a22:	f04f 31ff 	mov.w	r1, #4294967295
 8003a26:	6838      	ldr	r0, [r7, #0]
 8003a28:	f7ff fe1e 	bl	8003668 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <prvSwitchTimerLists+0x44>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvSwitchTimerLists+0x44>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <prvSwitchTimerLists+0x48>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <prvSwitchTimerLists+0x44>)
 8003a42:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <prvSwitchTimerLists+0x48>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
    }
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000ca20 	.word	0x2000ca20
 8003a58:	2000ca24 	.word	0x2000ca24

08003a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a60:	f7fe fa52 	bl	8001f08 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <prvCheckForValidListAndQueue+0x54>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11d      	bne.n	8003aa8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a6c:	4811      	ldr	r0, [pc, #68]	; (8003ab4 <prvCheckForValidListAndQueue+0x58>)
 8003a6e:	f7fd fe81 	bl	8001774 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a72:	4811      	ldr	r0, [pc, #68]	; (8003ab8 <prvCheckForValidListAndQueue+0x5c>)
 8003a74:	f7fd fe7e 	bl	8001774 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a78:	4b10      	ldr	r3, [pc, #64]	; (8003abc <prvCheckForValidListAndQueue+0x60>)
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <prvCheckForValidListAndQueue+0x58>)
 8003a7c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <prvCheckForValidListAndQueue+0x64>)
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <prvCheckForValidListAndQueue+0x5c>)
 8003a82:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a84:	2200      	movs	r2, #0
 8003a86:	210c      	movs	r1, #12
 8003a88:	200a      	movs	r0, #10
 8003a8a:	f7fe fb97 	bl	80021bc <xQueueGenericCreate>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <prvCheckForValidListAndQueue+0x54>)
 8003a92:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <prvCheckForValidListAndQueue+0x54>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <prvCheckForValidListAndQueue+0x54>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <prvCheckForValidListAndQueue+0x68>)
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fd5e 	bl	8002564 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003aa8:	f7fe fa5e 	bl	8001f68 <vPortExitCritical>
    }
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	2000ca28 	.word	0x2000ca28
 8003ab4:	2000c9f8 	.word	0x2000c9f8
 8003ab8:	2000ca0c 	.word	0x2000ca0c
 8003abc:	2000ca20 	.word	0x2000ca20
 8003ac0:	2000ca24 	.word	0x2000ca24
 8003ac4:	08003bb8 	.word	0x08003bb8

08003ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ac8:	480d      	ldr	r0, [pc, #52]	; (8003b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003acc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad0:	480c      	ldr	r0, [pc, #48]	; (8003b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ad2:	490d      	ldr	r1, [pc, #52]	; (8003b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <LoopForever+0xe>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad8:	e002      	b.n	8003ae0 <LoopCopyDataInit>

08003ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ade:	3304      	adds	r3, #4

08003ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae4:	d3f9      	bcc.n	8003ada <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ae8:	4c0a      	ldr	r4, [pc, #40]	; (8003b14 <LoopForever+0x16>)
  movs r3, #0
 8003aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aec:	e001      	b.n	8003af2 <LoopFillZerobss>

08003aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af0:	3204      	adds	r2, #4

08003af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af4:	d3fb      	bcc.n	8003aee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003af6:	f000 f811 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003afa:	f7fd fff3 	bl	8001ae4 <main>

08003afe <LoopForever>:

LoopForever:
    b LoopForever
 8003afe:	e7fe      	b.n	8003afe <LoopForever>
  ldr   r0, =_estack
 8003b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b08:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8003b0c:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8003b10:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8003b14:	2000ca34 	.word	0x2000ca34

08003b18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b18:	e7fe      	b.n	8003b18 <ADC_IRQHandler>
	...

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f82e 	bl	8003b90 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003bf0 	.word	0x08003bf0
 8003b58:	08003bf0 	.word	0x08003bf0
 8003b5c:	08003bf0 	.word	0x08003bf0
 8003b60:	08003bf4 	.word	0x08003bf4

08003b64 <memcpy>:
 8003b64:	440a      	add	r2, r1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b6c:	d100      	bne.n	8003b70 <memcpy+0xc>
 8003b6e:	4770      	bx	lr
 8003b70:	b510      	push	{r4, lr}
 8003b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b7a:	4291      	cmp	r1, r2
 8003b7c:	d1f9      	bne.n	8003b72 <memcpy+0xe>
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <memset>:
 8003b80:	4402      	add	r2, r0
 8003b82:	4603      	mov	r3, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
